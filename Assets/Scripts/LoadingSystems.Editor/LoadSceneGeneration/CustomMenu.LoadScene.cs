//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by "LoadSceneGenerator".
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEditor;
using UnityEditor.SceneManagement;

namespace Assets.Scripts.LoadingSystems.Editor.LoadSceneGeneration
{
    public static partial class CustomMenu
    {
        [MenuItem("SceneLoading/Load Scene/Gameplay/Load 0-Gameplay")]
        public static void LoadScene__0_Gameplay()
        {
            string relativeScenePath = @"Assets/Scenes/0-Gameplay.unity";
            if (EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo())
            {
                EditorSceneManager.OpenScene(relativeScenePath, OpenSceneMode.Additive);
            }
        }
		[MenuItem("SceneLoading/Load Scene/Room/Load 1-1-TransitionCorridorRoom")]
        public static void LoadScene__1_1_TransitionCorridorRoom()
        {
            string relativeScenePath = @"Assets/Scenes/1-1-TransitionCorridorRoom.unity";
            if (EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo())
            {
                EditorSceneManager.OpenScene(relativeScenePath, OpenSceneMode.Additive);
            }
        }
		[MenuItem("SceneLoading/Load Scene/Room/Load 1-WakeUpRoom")]
        public static void LoadScene__1_WakeUpRoom()
        {
            string relativeScenePath = @"Assets/Scenes/1-WakeUpRoom.unity";
            if (EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo())
            {
                EditorSceneManager.OpenScene(relativeScenePath, OpenSceneMode.Additive);
            }
        }
		[MenuItem("SceneLoading/Load Scene/Room/Load 3-1-CorridorRoom")]
        public static void LoadScene__3_1_CorridorRoom()
        {
            string relativeScenePath = @"Assets/Scenes/3-1-CorridorRoom.unity";
            if (EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo())
            {
                EditorSceneManager.OpenScene(relativeScenePath, OpenSceneMode.Additive);
            }
        }
		[MenuItem("SceneLoading/Load Scene/Room/Load 3-2-CorridorRoom")]
        public static void LoadScene__3_2_CorridorRoom()
        {
            string relativeScenePath = @"Assets/Scenes/3-2-CorridorRoom.unity";
            if (EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo())
            {
                EditorSceneManager.OpenScene(relativeScenePath, OpenSceneMode.Additive);
            }
        }
		[MenuItem("SceneLoading/Load Scene/Room/Load 3-HubRoom")]
        public static void LoadScene__3_HubRoom()
        {
            string relativeScenePath = @"Assets/Scenes/3-HubRoom.unity";
            if (EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo())
            {
                EditorSceneManager.OpenScene(relativeScenePath, OpenSceneMode.Additive);
            }
        }
		[MenuItem("SceneLoading/Load Scene/Room/Load 4-1-LabAccessRoom")]
        public static void LoadScene__4_1_LabAccessRoom()
        {
            string relativeScenePath = @"Assets/Scenes/4-1-LabAccessRoom.unity";
            if (EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo())
            {
                EditorSceneManager.OpenScene(relativeScenePath, OpenSceneMode.Additive);
            }
        }
		[MenuItem("SceneLoading/Load Scene/Room/Load 4-LabRoom")]
        public static void LoadScene__4_LabRoom()
        {
            string relativeScenePath = @"Assets/Scenes/4-LabRoom.unity";
            if (EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo())
            {
                EditorSceneManager.OpenScene(relativeScenePath, OpenSceneMode.Additive);
            }
        }
		[MenuItem("SceneLoading/Load Scene/Master/Load MasterScene")]
        public static void LoadScene_MasterScene()
        {
            string relativeScenePath = @"Assets/Scenes/MasterScene.unity";
            if (EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo())
            {
                EditorSceneManager.OpenScene(relativeScenePath, OpenSceneMode.Single);
            }
        }
		
    }
}