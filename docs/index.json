{
  "api/Packages.SceneLoading.Runtime.Doors.Door.html": {
    "href": "api/Packages.SceneLoading.Runtime.Doors.Door.html",
    "title": "Class Door | Scene Loading Documentation",
    "keywords": "Class Door Leads to another room. Will synchronize with the corresponding Door in the other room. Inheritance Object Door Namespace : Packages.SceneLoading.Runtime.Doors Assembly : cs.temp.dll.dll Syntax public class Door : MonoBehaviour Fields onClose Fired when the Door closes. Declaration public UnityEvent onClose Field Value Type Description UnityEvent onOpen Fired when the Door opens. Declaration public UnityEvent onOpen Field Value Type Description UnityEvent playerCurrentRoom Declaration public PersistentString playerCurrentRoom Field Value Type Description PersistentString Methods RequestClose() Declaration public void RequestClose() RequestOpen() Declaration public void RequestOpen()"
  },
  "api/Packages.SceneLoading.Runtime.Doors.DoorPairing.html": {
    "href": "api/Packages.SceneLoading.Runtime.Doors.DoorPairing.html",
    "title": "Class DoorPairing | Scene Loading Documentation",
    "keywords": "Class DoorPairing ScriptableObject linking two rooms together. Inheritance Object DoorPairing Namespace : Packages.SceneLoading.Runtime.Doors Assembly : cs.temp.dll.dll Syntax public class DoorPairing : ScriptableObject Properties BackScenePath Identifier of the Scene on the other side. Declaration public string BackScenePath { get; } Property Value Type Description String FrontScenePath Identifier of the Scene on one side. Declaration public string FrontScenePath { get; } Property Value Type Description String State Declaration public DoorState State { get; } Property Value Type Description DoorState Methods SetState(DoorState) Set the state of the doors. Declaration public void SetState(DoorState state) Parameters Type Name Description DoorState state Events OnStateChanged Fired when the state of the doors changes. Declaration public event Action<DoorState> OnStateChanged Event Type Type Description Action < DoorState >"
  },
  "api/Packages.SceneLoading.Runtime.Doors.DoorState.html": {
    "href": "api/Packages.SceneLoading.Runtime.Doors.DoorState.html",
    "title": "Enum DoorState | Scene Loading Documentation",
    "keywords": "Enum DoorState State of a Door . Namespace : Packages.SceneLoading.Runtime.Doors Assembly : cs.temp.dll.dll Syntax public enum DoorState Fields Name Description Closed Door is normally closed. Open Door is completely open. WaitingToOpen Door is closed, and the player wants to open it."
  },
  "api/Packages.SceneLoading.Runtime.Doors.html": {
    "href": "api/Packages.SceneLoading.Runtime.Doors.html",
    "title": "Namespace Packages.SceneLoading.Runtime.Doors | Scene Loading Documentation",
    "keywords": "Namespace Packages.SceneLoading.Runtime.Doors Classes Door Leads to another room. Will synchronize with the corresponding Door in the other room. DoorPairing ScriptableObject linking two rooms together. Enums DoorState State of a Door ."
  },
  "api/Packages.SceneLoading.Runtime.Loaders.html": {
    "href": "api/Packages.SceneLoading.Runtime.Loaders.html",
    "title": "Namespace Packages.SceneLoading.Runtime.Loaders | Scene Loading Documentation",
    "keywords": "Namespace Packages.SceneLoading.Runtime.Loaders Classes MainSceneLoader Loader of a Main Scene (i.e. a loaded with LoadSceneMode.Single). RoomLoader Loader of a room. RoomUnloadManager Manager in charge of unloading old rooms. SceneManagerExt Additionnal methods for Scene management."
  },
  "api/Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.html": {
    "href": "api/Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.html",
    "title": "Class MainSceneLoader | Scene Loading Documentation",
    "keywords": "Class MainSceneLoader Loader of a Main Scene (i.e. a loaded with LoadSceneMode.Single). Inheritance Object MainSceneLoader Namespace : Packages.SceneLoading.Runtime.Loaders Assembly : cs.temp.dll.dll Syntax public class MainSceneLoader : MonoBehaviour Fields mainSceneToLoad Declaration public MainSceneInfo mainSceneToLoad Field Value Type Description MainSceneInfo onProgress Once loading has started, fired each frame with the current loading progress. Don't forget to set your callbacks to 'Dynamic float' in the Inspector to get the progress value. Declaration public UnityFloatEvent onProgress Field Value Type Description UnityFloatEvent onReadyToActivate Fired when the scene is preloaded and ready to be activated. Declaration public UnityEvent onReadyToActivate Field Value Type Description UnityEvent Methods Activate() Activates the preloaded Scene. Declaration public void Activate() Preload() Preloads the main Scene. You will have to call Activate() manually once the Scene is ready (see onReadyToActivate for that). Declaration public void Preload() PreloadAsync() Preloads the main Scene. You can call Activate() after this method has returned to activate the Scene. Declaration public IEnumerator PreloadAsync() Returns Type Description IEnumerator"
  },
  "api/Packages.SceneLoading.Runtime.Loaders.RoomLoader.html": {
    "href": "api/Packages.SceneLoading.Runtime.Loaders.RoomLoader.html",
    "title": "Class RoomLoader | Scene Loading Documentation",
    "keywords": "Class RoomLoader Loader of a room. Inheritance Object RoomLoader Namespace : Packages.SceneLoading.Runtime.Loaders Assembly : cs.temp.dll.dll Syntax public class RoomLoader : MonoBehaviour Fields roomToLoad Scene corresponding to the room to load. Declaration public RoomInfo roomToLoad Field Value Type Description RoomInfo Methods Load() Loads the room scene additively if it's not already loaded. Declaration public void Load() LoadAsync() Loads the room scene additively if it's not already loaded. Declaration public IEnumerator LoadAsync() Returns Type Description IEnumerator"
  },
  "api/Packages.SceneLoading.Runtime.Loaders.RoomUnloadManager.html": {
    "href": "api/Packages.SceneLoading.Runtime.Loaders.RoomUnloadManager.html",
    "title": "Class RoomUnloadManager | Scene Loading Documentation",
    "keywords": "Class RoomUnloadManager Manager in charge of unloading old rooms. Inheritance Object RoomUnloadManager Namespace : Packages.SceneLoading.Runtime.Loaders Assembly : cs.temp.dll.dll Syntax public class RoomUnloadManager : MonoBehaviour Fields managedRooms Declaration public RoomInfoList managedRooms Field Value Type Description RoomInfoList maxLoadedRooms Declaration public int maxLoadedRooms Field Value Type Description Int32 playerCurrentRoom Declaration public PersistentString playerCurrentRoom Field Value Type Description PersistentString"
  },
  "api/Packages.SceneLoading.Runtime.Loaders.SceneManagerExt.html": {
    "href": "api/Packages.SceneLoading.Runtime.Loaders.SceneManagerExt.html",
    "title": "Class SceneManagerExt | Scene Loading Documentation",
    "keywords": "Class SceneManagerExt Additionnal methods for Scene management. Inheritance Object SceneManagerExt Namespace : Packages.SceneLoading.Runtime.Loaders Assembly : cs.temp.dll.dll Syntax public static class SceneManagerExt Methods LoadSubSceneAsync(String) Loads the given scene additively only if it's not already loaded. Yields until the loading is completed. Declaration public static IEnumerator LoadSubSceneAsync(string scenePath) Parameters Type Name Description String scenePath Path to the scene relative to the Assets folder. Returns Type Description IEnumerator Remarks Note that calling this method while the scene is already loading will result in the scene being loaded twice."
  },
  "api/Packages.SceneLoading.Runtime.SceneInfos.GameplayInfo.html": {
    "href": "api/Packages.SceneLoading.Runtime.SceneInfos.GameplayInfo.html",
    "title": "Class GameplayInfo | Scene Loading Documentation",
    "keywords": "Class GameplayInfo Data about a Gameplay Scene. Inheritance Object SceneInfo GameplayInfo Inherited Members SceneInfo.ScenePath SceneInfo.SceneFilename SceneInfo.DisplayName Namespace : Packages.SceneLoading.Runtime.SceneInfos Assembly : cs.temp.dll.dll Syntax public class GameplayInfo : SceneInfo Fields TypeName Declaration public const string TypeName = \"Gameplay\" Field Value Type Description String Properties SceneType Declaration public override string SceneType { get; } Property Value Type Description String Overrides SceneInfo.SceneType"
  },
  "api/Packages.SceneLoading.Runtime.SceneInfos.html": {
    "href": "api/Packages.SceneLoading.Runtime.SceneInfos.html",
    "title": "Namespace Packages.SceneLoading.Runtime.SceneInfos | Scene Loading Documentation",
    "keywords": "Namespace Packages.SceneLoading.Runtime.SceneInfos Classes GameplayInfo Data about a Gameplay Scene. MainSceneInfo Data about a Scene that will control the loading of other Scenes. RoomInfo Data about a Room Scene. RoomInfoList A collection of Rooms. Usually represents an area the player can explore. SceneInfo Data about a Scene."
  },
  "api/Packages.SceneLoading.Runtime.SceneInfos.MainSceneInfo.html": {
    "href": "api/Packages.SceneLoading.Runtime.SceneInfos.MainSceneInfo.html",
    "title": "Class MainSceneInfo | Scene Loading Documentation",
    "keywords": "Class MainSceneInfo Data about a Scene that will control the loading of other Scenes. Inheritance Object SceneInfo MainSceneInfo Inherited Members SceneInfo.ScenePath SceneInfo.SceneFilename SceneInfo.DisplayName Namespace : Packages.SceneLoading.Runtime.SceneInfos Assembly : cs.temp.dll.dll Syntax public class MainSceneInfo : SceneInfo Fields TypeName Declaration public const string TypeName = \"MainScene\" Field Value Type Description String Properties SceneType Declaration public override string SceneType { get; } Property Value Type Description String Overrides SceneInfo.SceneType"
  },
  "api/Packages.SceneLoading.Runtime.SceneInfos.RoomInfo.html": {
    "href": "api/Packages.SceneLoading.Runtime.SceneInfos.RoomInfo.html",
    "title": "Class RoomInfo | Scene Loading Documentation",
    "keywords": "Class RoomInfo Data about a Room Scene. Inheritance Object SceneInfo RoomInfo Inherited Members SceneInfo.ScenePath SceneInfo.SceneFilename Namespace : Packages.SceneLoading.Runtime.SceneInfos Assembly : cs.temp.dll.dll Syntax public class RoomInfo : SceneInfo Fields TypeName Declaration public const string TypeName = \"Room\" Field Value Type Description String Properties DisplayName Declaration public override string DisplayName { get; } Property Value Type Description String Overrides SceneInfo.DisplayName SceneType Declaration public override string SceneType { get; } Property Value Type Description String Overrides SceneInfo.SceneType"
  },
  "api/Packages.SceneLoading.Runtime.SceneInfos.RoomInfoList.html": {
    "href": "api/Packages.SceneLoading.Runtime.SceneInfos.RoomInfoList.html",
    "title": "Class RoomInfoList | Scene Loading Documentation",
    "keywords": "Class RoomInfoList A collection of Rooms. Usually represents an area the player can explore. Inheritance Object RoomInfoList Namespace : Packages.SceneLoading.Runtime.SceneInfos Assembly : cs.temp.dll.dll Syntax public class RoomInfoList : ScriptableObject Properties RoomInfos Declaration public IReadOnlyCollection<RoomInfo> RoomInfos { get; } Property Value Type Description IReadOnlyCollection < RoomInfo >"
  },
  "api/Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.html": {
    "href": "api/Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.html",
    "title": "Class SceneInfo | Scene Loading Documentation",
    "keywords": "Class SceneInfo Data about a Scene. Inheritance Object SceneInfo GameplayInfo MainSceneInfo RoomInfo Namespace : Packages.SceneLoading.Runtime.SceneInfos Assembly : cs.temp.dll.dll Syntax public abstract class SceneInfo : ScriptableObject Properties DisplayName Declaration public virtual string DisplayName { get; } Property Value Type Description String SceneFilename Declaration public string SceneFilename { get; } Property Value Type Description String ScenePath Declaration public string ScenePath { get; } Property Value Type Description String SceneType Declaration public virtual string SceneType { get; } Property Value Type Description String"
  },
  "api/Packages.SceneLoading.Runtime.SceneRefs.html": {
    "href": "api/Packages.SceneLoading.Runtime.SceneRefs.html",
    "title": "Namespace Packages.SceneLoading.Runtime.SceneRefs | Scene Loading Documentation",
    "keywords": "Namespace Packages.SceneLoading.Runtime.SceneRefs Classes SceneReference A wrapper that provides the means to safely serialize Scene Asset References."
  },
  "api/Packages.SceneLoading.Runtime.SceneRefs.SceneReference.html": {
    "href": "api/Packages.SceneLoading.Runtime.SceneRefs.SceneReference.html",
    "title": "Class SceneReference | Scene Loading Documentation",
    "keywords": "Class SceneReference A wrapper that provides the means to safely serialize Scene Asset References. Inheritance Object SceneReference Namespace : Packages.SceneLoading.Runtime.SceneRefs Assembly : cs.temp.dll.dll Syntax [Serializable] public class SceneReference : ISerializationCallbackReceiver Properties ScenePath Declaration public string ScenePath { get; set; } Property Value Type Description String Methods OnAfterDeserialize() Declaration public void OnAfterDeserialize() OnBeforeSerialize() Declaration public void OnBeforeSerialize() Operators Implicit(SceneReference to String) Declaration public static implicit operator string (SceneReference sceneReference) Parameters Type Name Description SceneReference sceneReference Returns Type Description String"
  },
  "index.html": {
    "href": "index.html",
    "title": "SceneLoading | Scene Loading Documentation",
    "keywords": "SceneLoading Management of scene loading in a Metroidvania fashion for Unity. Table of content Installation Concepts Main Components Editor Tools"
  },
  "manual/0_Installation.html": {
    "href": "manual/0_Installation.html",
    "title": "Installation | Scene Loading Documentation",
    "keywords": "Installation Install SceneLoading 2.0 SceneLoading relies on the UniKit package, so you will need to install UniKit first, then SceneLoading: In your Unity project, open the PackageManager ( Window > PackageManager ) Click on the + sign on the top left, then select Add package from git URL Paste this URL to get UniKit : https://github.com/SuperValou/UniKit.git#1.2.0 Click Add then wait for UniKit to be installed Once UniKit is installed, click on the + sign and Add package from git URL again Paste this URL to get SceneLoading : https://github.com/SuperValou/SceneLoading.git#2.0.0 Click Add then wait for SceneLoading to be installed You're good to go! Organizing your scenes Before doing anything else, it's important to split your scenes properly. Head over the Concepts page to see how to you can organize your scenes to make the most of SceneLoading."
  },
  "manual/1_Concepts.html": {
    "href": "manual/1_Concepts.html",
    "title": "Concepts | Scene Loading Documentation",
    "keywords": "Concepts The following concepts are inspired from how a classic Metroidvania game is usually broken down. World The World of the game will be defined as the universe the game takes place in. It encompasses all locations, and can be thought of as the whole main game itself. Area The world is usually split into interconnected Areas defining the general structure and pacing of the game. An Area can be thought of as a big sequence, as going through an Area usually takes at least one full play session. As the player progresses through the game, new Areas become available to her and more connections between previous Areas open up to allow some form of fast-travel or easier back-tracking. Note that travelling between Areas often causes an acceptable downtine in gameplay (usually in the form of a loading screen) due to the underlying loading happening in the background. Example of Areas: Room A given area is then divided into Rooms that the player can explore. A Room is a small, contained, physical location where one or more gameplay elements may happen, like an enemy to fight or a puzzle to solve. Example of Rooms: Scenes From these concepts, Unity Scenes can be divided into at least three different types: Main Scene A Main Scene is an entry point of the game, and may correspond to an area. The key idea is that a Main scene does not actually contain any geometry, mesh or any other physical objects, but is instead responsible for additively loading the player and loading the first few rooms of the current area. GameObjects managing the game as a whole are supposed to be found in a Main Scene. Gameplay A Gameplay scene contains everything related to the player. GameObjects related to controls, player camera and UI are expected to be found in a Gameplay scene. No physical object bound to a specific location should be present in such a scene. Room As the name implies, a Room corresponds to a room, and is a physical location (or level) the player can explore and interact with. Most of the familiar GameObjects like ground, walls, props, interactive items and entities such as enemies or bosses are expected to be found here. Relations between Scene types:"
  },
  "manual/2_MainTypes.html": {
    "href": "manual/2_MainTypes.html",
    "title": "Main Components | Scene Loading Documentation",
    "keywords": "Main Components SceneInfo SceneLoading uses a ScriptableObject called a SceneInfo to tie some data to a .unity scene file. A SceneInfo can be specialized into a RoomInfo , GameplayInfo or MainSceneInfo depending on what your .unity file represents. For example, if you have a Room in a Lab.unity file, you'll need to create a RoomInfo asset for this scene. To create a RoomInfo asset, right-click in your Project tab, then go to Create > SceneLoading > SceneInfo > RoomInfo . You can then edit the RoomInfo asset to select the .unity file it corresponds to. A small utility is also available to generate your SceneInfo assets automatically from your .unity files. For more details about that, head over the Editor Tools section. Once you have a SceneInfo for each one of your scenes, you can begin connecting your rooms together. RoomLoader The RoomLoader component can be used to load a Room B from a Room A. For example, you may want to load Room B when the player is getting close to a door from Room A. To achieve that: At edit time In the Room A scene, create a new GameObject Attach a RoomLoader component to it Select the RoomInfo corrresponding to Room B (the room you want to load) At runtime When the player is getting close to Room B from Room A, call the Load method of the RoomLoader component The Room will be loaded automatically and only if it's not already there Note: you may want to use the Trigger * component to call the Load method when the player enters the trigger. * Details about the Trigger component are available in the UniKit documentation . RoomUnloadManager As the player moves between Rooms, you may want to only keep the most recently visited Rooms and unload all the other ones to save some memory. To use the RoomUnloadManager component, you will first need to track the Room the player is in. To achieve that: At edit time If you don't already have one, create a RoomList asset to represent an Area of managed Rooms. To create a RoomList asset, Right-click into your project tab, then go to SceneLoading > Create Room List . You can then add all the Rooms of your Area to this asset If you don't already have one, create a new PersistentString * asset to track the room the player is in In your Main Scene representing the current Area, create a new GameObject Attach a RoomUnloadManager component to it In the RoomUnloadManager inspector, add your PersistentString asset tracking the player Add the RoomList asset corresponding to your Area Optionally, set the number of rooms you want to keep in memory * Details about persistent variables are available in the UniKit documentation . At runtime Rooms will be unloaded automatically to only keep the most recent ones in memory, and the room the player is in never gets unloaded Important note: the RoomUnloadManager will not unload a Room that does not appear in the given RoomList asset. Door & DoorPairing You may want to have physical doors connecting Rooms together. However, doors can get tricky as one side will be in one Room, but the other is in another Room that may or may not be loaded yet. Opening a door can then become tedious due to the required synchronization between each side. SceneLoading provides the Door component and the DoorPairing ScriptableObject to solve these issues. The DoorPairing ScriptableObject ties two RoomInfo s together and holds the shared state of each side of the door between these rooms. To create a DoorPairing asset, right-click in your Project tab, then go to Create > SceneLoading > Create DoorPairing . You can then edit the two RoomInfo to tie together. In each room to connect, a Door component can be placed on a GameObject (usually the actual door of each room). You can then reference the same DoorPairing asset to synchronize the two doors together. Don't forget to update the PersistentString tracking the room the player is in. You may want to use Trigger components for that. For more informations about these objects, see the UniKit documentation ."
  },
  "manual/3_GettingStarted.html": {
    "href": "manual/3_GettingStarted.html",
    "title": "| Scene Loading Documentation",
    "keywords": "Lets assume you have the following unity scene files: Initialization.unity being the entry point of your main game Gameplay.unity being your Gameplay scene Forest.unity being a Room scene Beach.unity being a Room scene TitleScreen.unity being the main menu GameOver.unity being the game over screen"
  },
  "manual/4_EditorTools.html": {
    "href": "manual/4_EditorTools.html",
    "title": "Editor Tools | Scene Loading Documentation",
    "keywords": "Editor Tools Generate SceneInfo assets In Unity menu bar, under SceneLoading > Generate SceneInfo assets This menu allows you to generate scriptable objects corresponding to your scene files, provided that you labeled these scenes properly beforehand. For example, a scene file like \"BossArena.unity\" can be labeled with Scene-Room to identify this scene as a Room . Running the tool will then create a RoomInfo asset called \"BossArena.asset\" in your Assets/ folder. You can then move it anywhere you like. Additionnal notes The label put on the .unity file must start with Scene- to be acknowledged by the tool. A custom label like Scene-MyOwnSceneType will also work, as long as you defined a MyOwnSceneType C# class inheriting from SceneInfo beforehand. Scenes having more than one Scene- label will be ignored and issue a warning in the console. Running the tool creates the corresponding scriptable object at the root of the Assets/ folder. If an asset file with the same name already exists here (at the root), it will be overwritten. Existing Assets located in subfolders are ignored. Generate 'Load Scene' Menu In Unity menu bar, under SceneLoading > Generate 'Load Scene' Menu This menu generates a script file that will append a new 'Load Scene' menu to the toolbar. This generated menu allows you to quickly load a scene in the Editor without going back into the Project Window. Additionnal notes The tool uses the SceneInfo assets found in the project, not the .unity files. The tool generates a menu item for any ScriptableObject inheriting from the SceneInfo class, meaning your own subclasses will also be taken into account. You may want to run this tool every time a scene is added to (or removed from) the project in order to update the generated menu."
  }
}