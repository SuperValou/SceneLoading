id: cs.temp.dll
language: CSharp
name:
  Default: cs.temp.dll
qualifiedName:
  Default: cs.temp.dll
type: Assembly
modifiers: {}
items:
- id: Packages.SceneLoading.Runtime.Doors
  commentId: N:Packages.SceneLoading.Runtime.Doors
  language: CSharp
  name:
    CSharp: Packages.SceneLoading.Runtime.Doors
    VB: Packages.SceneLoading.Runtime.Doors
  nameWithType:
    CSharp: Packages.SceneLoading.Runtime.Doors
    VB: Packages.SceneLoading.Runtime.Doors
  qualifiedName:
    CSharp: Packages.SceneLoading.Runtime.Doors
    VB: Packages.SceneLoading.Runtime.Doors
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Packages.SceneLoading.Runtime.Doors.Door
    commentId: T:Packages.SceneLoading.Runtime.Doors.Door
    language: CSharp
    name:
      CSharp: Door
      VB: Door
    nameWithType:
      CSharp: Door
      VB: Door
    qualifiedName:
      CSharp: Packages.SceneLoading.Runtime.Doors.Door
      VB: Packages.SceneLoading.Runtime.Doors.Door
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Packages.SceneLoading.Runtime.Doors
    source:
      id: Door
      path: ''
      startLine: 12
    summary: "\nLeads to another room. Will synchronize with the corresponding <xref href=\"Packages.SceneLoading.Runtime.Doors.Door\" data-throw-if-not-resolved=\"false\"></xref> in the other room.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class Door : MonoBehaviour'
        VB: >-
          Public Class Door

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Packages.SceneLoading.Runtime.Doors.Door.playerCurrentRoom
      commentId: F:Packages.SceneLoading.Runtime.Doors.Door.playerCurrentRoom
      language: CSharp
      name:
        CSharp: playerCurrentRoom
        VB: playerCurrentRoom
      nameWithType:
        CSharp: Door.playerCurrentRoom
        VB: Door.playerCurrentRoom
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.Doors.Door.playerCurrentRoom
        VB: Packages.SceneLoading.Runtime.Doors.Door.playerCurrentRoom
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.Doors
      source:
        id: playerCurrentRoom
        path: ''
        startLine: 23
      syntax:
        content:
          CSharp: public PersistentString playerCurrentRoom
          VB: Public playerCurrentRoom As PersistentString
        return:
          type: Global.PersistentString
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Packages.SceneLoading.Runtime.Doors.Door.onOpen
      commentId: F:Packages.SceneLoading.Runtime.Doors.Door.onOpen
      language: CSharp
      name:
        CSharp: onOpen
        VB: onOpen
      nameWithType:
        CSharp: Door.onOpen
        VB: Door.onOpen
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.Doors.Door.onOpen
        VB: Packages.SceneLoading.Runtime.Doors.Door.onOpen
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.Doors
      source:
        id: onOpen
        path: ''
        startLine: 29
      summary: "\nFired when the <xref href=\"Packages.SceneLoading.Runtime.Doors.Door\" data-throw-if-not-resolved=\"false\"></xref> opens.\n"
      example: []
      syntax:
        content:
          CSharp: public UnityEvent onOpen
          VB: Public onOpen As UnityEvent
        return:
          type: Global.UnityEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Packages.SceneLoading.Runtime.Doors.Door: 
    - id: Packages.SceneLoading.Runtime.Doors.Door.onClose
      commentId: F:Packages.SceneLoading.Runtime.Doors.Door.onClose
      language: CSharp
      name:
        CSharp: onClose
        VB: onClose
      nameWithType:
        CSharp: Door.onClose
        VB: Door.onClose
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.Doors.Door.onClose
        VB: Packages.SceneLoading.Runtime.Doors.Door.onClose
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.Doors
      source:
        id: onClose
        path: ''
        startLine: 34
      summary: "\nFired when the <xref href=\"Packages.SceneLoading.Runtime.Doors.Door\" data-throw-if-not-resolved=\"false\"></xref> closes.\n"
      example: []
      syntax:
        content:
          CSharp: public UnityEvent onClose
          VB: Public onClose As UnityEvent
        return:
          type: Global.UnityEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Packages.SceneLoading.Runtime.Doors.Door: 
    - id: Packages.SceneLoading.Runtime.Doors.Door.RequestOpen
      commentId: M:Packages.SceneLoading.Runtime.Doors.Door.RequestOpen
      language: CSharp
      name:
        CSharp: RequestOpen()
        VB: RequestOpen()
      nameWithType:
        CSharp: Door.RequestOpen()
        VB: Door.RequestOpen()
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.Doors.Door.RequestOpen()
        VB: Packages.SceneLoading.Runtime.Doors.Door.RequestOpen()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.Doors
      source:
        id: RequestOpen
        path: ''
        startLine: 66
      syntax:
        content:
          CSharp: public void RequestOpen()
          VB: Public Sub RequestOpen
      overload: Packages.SceneLoading.Runtime.Doors.Door.RequestOpen*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Packages.SceneLoading.Runtime.Doors.Door.RequestClose
      commentId: M:Packages.SceneLoading.Runtime.Doors.Door.RequestClose
      language: CSharp
      name:
        CSharp: RequestClose()
        VB: RequestClose()
      nameWithType:
        CSharp: Door.RequestClose()
        VB: Door.RequestClose()
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.Doors.Door.RequestClose()
        VB: Packages.SceneLoading.Runtime.Doors.Door.RequestClose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.Doors
      source:
        id: RequestClose
        path: ''
        startLine: 78
      syntax:
        content:
          CSharp: public void RequestClose()
          VB: Public Sub RequestClose
      overload: Packages.SceneLoading.Runtime.Doors.Door.RequestClose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    references:
      Packages.SceneLoading.Runtime.Doors.Door: 
  - id: Packages.SceneLoading.Runtime.Doors.DoorPairing
    commentId: T:Packages.SceneLoading.Runtime.Doors.DoorPairing
    language: CSharp
    name:
      CSharp: DoorPairing
      VB: DoorPairing
    nameWithType:
      CSharp: DoorPairing
      VB: DoorPairing
    qualifiedName:
      CSharp: Packages.SceneLoading.Runtime.Doors.DoorPairing
      VB: Packages.SceneLoading.Runtime.Doors.DoorPairing
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Packages.SceneLoading.Runtime.Doors
    source:
      id: DoorPairing
      path: ''
      startLine: 158
    summary: "\nScriptableObject linking two rooms together.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class DoorPairing : ScriptableObject'
        VB: >-
          Public Class DoorPairing

              Inherits ScriptableObject
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Packages.SceneLoading.Runtime.Doors.DoorPairing.State
      commentId: P:Packages.SceneLoading.Runtime.Doors.DoorPairing.State
      language: CSharp
      name:
        CSharp: State
        VB: State
      nameWithType:
        CSharp: DoorPairing.State
        VB: DoorPairing.State
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.Doors.DoorPairing.State
        VB: Packages.SceneLoading.Runtime.Doors.DoorPairing.State
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.Doors
      source:
        id: State
        path: ''
        startLine: 176
      syntax:
        content:
          CSharp: public DoorState State { get; }
          VB: Public ReadOnly Property State As DoorState
        parameters: []
        return:
          type: Packages.SceneLoading.Runtime.Doors.DoorState
      overload: Packages.SceneLoading.Runtime.Doors.DoorPairing.State*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Packages.SceneLoading.Runtime.Doors.DoorPairing.FrontScenePath
      commentId: P:Packages.SceneLoading.Runtime.Doors.DoorPairing.FrontScenePath
      language: CSharp
      name:
        CSharp: FrontScenePath
        VB: FrontScenePath
      nameWithType:
        CSharp: DoorPairing.FrontScenePath
        VB: DoorPairing.FrontScenePath
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.Doors.DoorPairing.FrontScenePath
        VB: Packages.SceneLoading.Runtime.Doors.DoorPairing.FrontScenePath
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.Doors
      source:
        id: FrontScenePath
        path: ''
        startLine: 181
      summary: "\nIdentifier of the Scene on one side.\n"
      example: []
      syntax:
        content:
          CSharp: public string FrontScenePath { get; }
          VB: Public ReadOnly Property FrontScenePath As String
        parameters: []
        return:
          type: System.String
      overload: Packages.SceneLoading.Runtime.Doors.DoorPairing.FrontScenePath*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Packages.SceneLoading.Runtime.Doors.DoorPairing.BackScenePath
      commentId: P:Packages.SceneLoading.Runtime.Doors.DoorPairing.BackScenePath
      language: CSharp
      name:
        CSharp: BackScenePath
        VB: BackScenePath
      nameWithType:
        CSharp: DoorPairing.BackScenePath
        VB: DoorPairing.BackScenePath
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.Doors.DoorPairing.BackScenePath
        VB: Packages.SceneLoading.Runtime.Doors.DoorPairing.BackScenePath
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.Doors
      source:
        id: BackScenePath
        path: ''
        startLine: 186
      summary: "\nIdentifier of the Scene on the other side.\n"
      example: []
      syntax:
        content:
          CSharp: public string BackScenePath { get; }
          VB: Public ReadOnly Property BackScenePath As String
        parameters: []
        return:
          type: System.String
      overload: Packages.SceneLoading.Runtime.Doors.DoorPairing.BackScenePath*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Packages.SceneLoading.Runtime.Doors.DoorPairing.OnStateChanged
      commentId: E:Packages.SceneLoading.Runtime.Doors.DoorPairing.OnStateChanged
      language: CSharp
      name:
        CSharp: OnStateChanged
        VB: OnStateChanged
      nameWithType:
        CSharp: DoorPairing.OnStateChanged
        VB: DoorPairing.OnStateChanged
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.Doors.DoorPairing.OnStateChanged
        VB: Packages.SceneLoading.Runtime.Doors.DoorPairing.OnStateChanged
      type: Event
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.Doors
      source:
        id: OnStateChanged
        path: ''
        startLine: 191
      summary: "\nFired when the state of the doors changes.\n"
      example: []
      syntax:
        content:
          CSharp: public event Action<DoorState> OnStateChanged
          VB: Public Event OnStateChanged As Action(Of DoorState)
        return:
          type: System.Action{Packages.SceneLoading.Runtime.Doors.DoorState}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Packages.SceneLoading.Runtime.Doors.DoorPairing.SetState(Packages.SceneLoading.Runtime.Doors.DoorState)
      commentId: M:Packages.SceneLoading.Runtime.Doors.DoorPairing.SetState(Packages.SceneLoading.Runtime.Doors.DoorState)
      language: CSharp
      name:
        CSharp: SetState(DoorState)
        VB: SetState(DoorState)
      nameWithType:
        CSharp: DoorPairing.SetState(DoorState)
        VB: DoorPairing.SetState(DoorState)
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.Doors.DoorPairing.SetState(Packages.SceneLoading.Runtime.Doors.DoorState)
        VB: Packages.SceneLoading.Runtime.Doors.DoorPairing.SetState(Packages.SceneLoading.Runtime.Doors.DoorState)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.Doors
      source:
        id: SetState
        path: ''
        startLine: 196
      summary: "\nSet the state of the doors.\n"
      example: []
      syntax:
        content:
          CSharp: public void SetState(DoorState state)
          VB: Public Sub SetState(state As DoorState)
        parameters:
        - id: state
          type: Packages.SceneLoading.Runtime.Doors.DoorState
      overload: Packages.SceneLoading.Runtime.Doors.DoorPairing.SetState*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Packages.SceneLoading.Runtime.Doors.DoorState
    commentId: T:Packages.SceneLoading.Runtime.Doors.DoorState
    language: CSharp
    name:
      CSharp: DoorState
      VB: DoorState
    nameWithType:
      CSharp: DoorState
      VB: DoorState
    qualifiedName:
      CSharp: Packages.SceneLoading.Runtime.Doors.DoorState
      VB: Packages.SceneLoading.Runtime.Doors.DoorState
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Packages.SceneLoading.Runtime.Doors
    source:
      id: DoorState
      path: ''
      startLine: 223
    summary: "\nState of a <xref href=\"Packages.SceneLoading.Runtime.Doors.Door\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    example: []
    syntax:
      content:
        CSharp: public enum DoorState
        VB: Public Enum DoorState
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Packages.SceneLoading.Runtime.Doors.DoorState.Closed
      commentId: F:Packages.SceneLoading.Runtime.Doors.DoorState.Closed
      language: CSharp
      name:
        CSharp: Closed
        VB: Closed
      nameWithType:
        CSharp: DoorState.Closed
        VB: DoorState.Closed
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.Doors.DoorState.Closed
        VB: Packages.SceneLoading.Runtime.Doors.DoorState.Closed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.Doors
      source:
        id: Closed
        path: ''
        startLine: 228
      summary: "\nDoor is normally closed.\n"
      example: []
      syntax:
        content:
          CSharp: Closed = 0
          VB: Closed = 0
        return:
          type: Packages.SceneLoading.Runtime.Doors.DoorState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Packages.SceneLoading.Runtime.Doors.DoorState.WaitingToOpen
      commentId: F:Packages.SceneLoading.Runtime.Doors.DoorState.WaitingToOpen
      language: CSharp
      name:
        CSharp: WaitingToOpen
        VB: WaitingToOpen
      nameWithType:
        CSharp: DoorState.WaitingToOpen
        VB: DoorState.WaitingToOpen
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.Doors.DoorState.WaitingToOpen
        VB: Packages.SceneLoading.Runtime.Doors.DoorState.WaitingToOpen
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.Doors
      source:
        id: WaitingToOpen
        path: ''
        startLine: 233
      summary: "\nDoor is closed, and the player wants to open it.\n"
      example: []
      syntax:
        content:
          CSharp: WaitingToOpen = 1
          VB: WaitingToOpen = 1
        return:
          type: Packages.SceneLoading.Runtime.Doors.DoorState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Packages.SceneLoading.Runtime.Doors.DoorState.Open
      commentId: F:Packages.SceneLoading.Runtime.Doors.DoorState.Open
      language: CSharp
      name:
        CSharp: Open
        VB: Open
      nameWithType:
        CSharp: DoorState.Open
        VB: DoorState.Open
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.Doors.DoorState.Open
        VB: Packages.SceneLoading.Runtime.Doors.DoorState.Open
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.Doors
      source:
        id: Open
        path: ''
        startLine: 238
      summary: "\nDoor is completely open.\n"
      example: []
      syntax:
        content:
          CSharp: Open = 2
          VB: Open = 2
        return:
          type: Packages.SceneLoading.Runtime.Doors.DoorState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    references:
      Packages.SceneLoading.Runtime.Doors.Door: 
- id: Packages.SceneLoading.Runtime.Loaders
  commentId: N:Packages.SceneLoading.Runtime.Loaders
  language: CSharp
  name:
    CSharp: Packages.SceneLoading.Runtime.Loaders
    VB: Packages.SceneLoading.Runtime.Loaders
  nameWithType:
    CSharp: Packages.SceneLoading.Runtime.Loaders
    VB: Packages.SceneLoading.Runtime.Loaders
  qualifiedName:
    CSharp: Packages.SceneLoading.Runtime.Loaders
    VB: Packages.SceneLoading.Runtime.Loaders
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader
    commentId: T:Packages.SceneLoading.Runtime.Loaders.MainSceneLoader
    language: CSharp
    name:
      CSharp: MainSceneLoader
      VB: MainSceneLoader
    nameWithType:
      CSharp: MainSceneLoader
      VB: MainSceneLoader
    qualifiedName:
      CSharp: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader
      VB: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Packages.SceneLoading.Runtime.Loaders
    source:
      id: MainSceneLoader
      path: ''
      startLine: 254
    summary: "\nLoader of a Main Scene (i.e. a loaded with LoadSceneMode.Single).\n"
    example: []
    syntax:
      content:
        CSharp: 'public class MainSceneLoader : MonoBehaviour'
        VB: >-
          Public Class MainSceneLoader

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.mainSceneToLoad
      commentId: F:Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.mainSceneToLoad
      language: CSharp
      name:
        CSharp: mainSceneToLoad
        VB: mainSceneToLoad
      nameWithType:
        CSharp: MainSceneLoader.mainSceneToLoad
        VB: MainSceneLoader.mainSceneToLoad
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.mainSceneToLoad
        VB: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.mainSceneToLoad
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.Loaders
      source:
        id: mainSceneToLoad
        path: ''
        startLine: 258
      syntax:
        content:
          CSharp: public MainSceneInfo mainSceneToLoad
          VB: Public mainSceneToLoad As MainSceneInfo
        return:
          type: Global.MainSceneInfo
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.onProgress
      commentId: F:Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.onProgress
      language: CSharp
      name:
        CSharp: onProgress
        VB: onProgress
      nameWithType:
        CSharp: MainSceneLoader.onProgress
        VB: MainSceneLoader.onProgress
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.onProgress
        VB: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.onProgress
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.Loaders
      source:
        id: onProgress
        path: ''
        startLine: 265
      summary: "\nOnce loading has started, fired each frame with the current loading progress.\nDon&apos;t forget to set your callbacks to &apos;Dynamic float&apos; in the Inspector to get the progress value.\n"
      example: []
      syntax:
        content:
          CSharp: public UnityFloatEvent onProgress
          VB: Public onProgress As UnityFloatEvent
        return:
          type: Global.UnityFloatEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.onReadyToActivate
      commentId: F:Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.onReadyToActivate
      language: CSharp
      name:
        CSharp: onReadyToActivate
        VB: onReadyToActivate
      nameWithType:
        CSharp: MainSceneLoader.onReadyToActivate
        VB: MainSceneLoader.onReadyToActivate
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.onReadyToActivate
        VB: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.onReadyToActivate
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.Loaders
      source:
        id: onReadyToActivate
        path: ''
        startLine: 270
      summary: "\nFired when the scene is preloaded and ready to be activated.\n"
      example: []
      syntax:
        content:
          CSharp: public UnityEvent onReadyToActivate
          VB: Public onReadyToActivate As UnityEvent
        return:
          type: Global.UnityEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.Preload
      commentId: M:Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.Preload
      language: CSharp
      name:
        CSharp: Preload()
        VB: Preload()
      nameWithType:
        CSharp: MainSceneLoader.Preload()
        VB: MainSceneLoader.Preload()
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.Preload()
        VB: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.Preload()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.Loaders
      source:
        id: Preload
        path: ''
        startLine: 281
      summary: "\nPreloads the main Scene. You will have to call <xref href=\"Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.Activate\" data-throw-if-not-resolved=\"false\"></xref> manually once the Scene is ready (see <xref href=\"Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.onReadyToActivate\" data-throw-if-not-resolved=\"false\"></xref> for that).\n"
      example: []
      syntax:
        content:
          CSharp: public void Preload()
          VB: Public Sub Preload
      overload: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.Preload*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.Activate: 
        Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.onReadyToActivate: 
    - id: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.PreloadAsync
      commentId: M:Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.PreloadAsync
      language: CSharp
      name:
        CSharp: PreloadAsync()
        VB: PreloadAsync()
      nameWithType:
        CSharp: MainSceneLoader.PreloadAsync()
        VB: MainSceneLoader.PreloadAsync()
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.PreloadAsync()
        VB: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.PreloadAsync()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.Loaders
      source:
        id: PreloadAsync
        path: ''
        startLine: 295
      summary: "\nPreloads the main Scene. You can call <xref href=\"Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.Activate\" data-throw-if-not-resolved=\"false\"></xref> after this method has returned to activate the Scene.\n"
      example: []
      syntax:
        content:
          CSharp: public IEnumerator PreloadAsync()
          VB: Public Function PreloadAsync As IEnumerator
        return:
          type: System.Collections.IEnumerator
          description: ''
      overload: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.PreloadAsync*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.Activate: 
    - id: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.Activate
      commentId: M:Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.Activate
      language: CSharp
      name:
        CSharp: Activate()
        VB: Activate()
      nameWithType:
        CSharp: MainSceneLoader.Activate()
        VB: MainSceneLoader.Activate()
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.Activate()
        VB: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.Activate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.Loaders
      source:
        id: Activate
        path: ''
        startLine: 340
      summary: "\nActivates the preloaded Scene.\n"
      example: []
      syntax:
        content:
          CSharp: public void Activate()
          VB: Public Sub Activate
      overload: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.Activate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Packages.SceneLoading.Runtime.Loaders.RoomLoader
    commentId: T:Packages.SceneLoading.Runtime.Loaders.RoomLoader
    language: CSharp
    name:
      CSharp: RoomLoader
      VB: RoomLoader
    nameWithType:
      CSharp: RoomLoader
      VB: RoomLoader
    qualifiedName:
      CSharp: Packages.SceneLoading.Runtime.Loaders.RoomLoader
      VB: Packages.SceneLoading.Runtime.Loaders.RoomLoader
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Packages.SceneLoading.Runtime.Loaders
    source:
      id: RoomLoader
      path: ''
      startLine: 363
    summary: "\nLoader of a room.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class RoomLoader : MonoBehaviour'
        VB: >-
          Public Class RoomLoader

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Packages.SceneLoading.Runtime.Loaders.RoomLoader.roomToLoad
      commentId: F:Packages.SceneLoading.Runtime.Loaders.RoomLoader.roomToLoad
      language: CSharp
      name:
        CSharp: roomToLoad
        VB: roomToLoad
      nameWithType:
        CSharp: RoomLoader.roomToLoad
        VB: RoomLoader.roomToLoad
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.Loaders.RoomLoader.roomToLoad
        VB: Packages.SceneLoading.Runtime.Loaders.RoomLoader.roomToLoad
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.Loaders
      source:
        id: roomToLoad
        path: ''
        startLine: 368
      summary: "\nScene corresponding to the room to load.\n"
      example: []
      syntax:
        content:
          CSharp: public RoomInfo roomToLoad
          VB: Public roomToLoad As RoomInfo
        return:
          type: Global.RoomInfo
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Packages.SceneLoading.Runtime.Loaders.RoomLoader.Load
      commentId: M:Packages.SceneLoading.Runtime.Loaders.RoomLoader.Load
      language: CSharp
      name:
        CSharp: Load()
        VB: Load()
      nameWithType:
        CSharp: RoomLoader.Load()
        VB: RoomLoader.Load()
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.Loaders.RoomLoader.Load()
        VB: Packages.SceneLoading.Runtime.Loaders.RoomLoader.Load()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.Loaders
      source:
        id: Load
        path: ''
        startLine: 394
      summary: "\nLoads the room scene additively if it&apos;s not already loaded.\n"
      example: []
      syntax:
        content:
          CSharp: public void Load()
          VB: Public Sub Load
      overload: Packages.SceneLoading.Runtime.Loaders.RoomLoader.Load*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Packages.SceneLoading.Runtime.Loaders.RoomLoader.LoadAsync
      commentId: M:Packages.SceneLoading.Runtime.Loaders.RoomLoader.LoadAsync
      language: CSharp
      name:
        CSharp: LoadAsync()
        VB: LoadAsync()
      nameWithType:
        CSharp: RoomLoader.LoadAsync()
        VB: RoomLoader.LoadAsync()
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.Loaders.RoomLoader.LoadAsync()
        VB: Packages.SceneLoading.Runtime.Loaders.RoomLoader.LoadAsync()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.Loaders
      source:
        id: LoadAsync
        path: ''
        startLine: 409
      summary: "\nLoads the room scene additively if it&apos;s not already loaded.\n"
      example: []
      syntax:
        content:
          CSharp: public IEnumerator LoadAsync()
          VB: Public Function LoadAsync As IEnumerator
        return:
          type: System.Collections.IEnumerator
      overload: Packages.SceneLoading.Runtime.Loaders.RoomLoader.LoadAsync*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Packages.SceneLoading.Runtime.Loaders.RoomUnloadManager
    commentId: T:Packages.SceneLoading.Runtime.Loaders.RoomUnloadManager
    language: CSharp
    name:
      CSharp: RoomUnloadManager
      VB: RoomUnloadManager
    nameWithType:
      CSharp: RoomUnloadManager
      VB: RoomUnloadManager
    qualifiedName:
      CSharp: Packages.SceneLoading.Runtime.Loaders.RoomUnloadManager
      VB: Packages.SceneLoading.Runtime.Loaders.RoomUnloadManager
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Packages.SceneLoading.Runtime.Loaders
    source:
      id: RoomUnloadManager
      path: ''
      startLine: 472
    summary: "\nManager in charge of unloading old rooms.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class RoomUnloadManager : MonoBehaviour'
        VB: >-
          Public Class RoomUnloadManager

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Packages.SceneLoading.Runtime.Loaders.RoomUnloadManager.maxLoadedRooms
      commentId: F:Packages.SceneLoading.Runtime.Loaders.RoomUnloadManager.maxLoadedRooms
      language: CSharp
      name:
        CSharp: maxLoadedRooms
        VB: maxLoadedRooms
      nameWithType:
        CSharp: RoomUnloadManager.maxLoadedRooms
        VB: RoomUnloadManager.maxLoadedRooms
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.Loaders.RoomUnloadManager.maxLoadedRooms
        VB: Packages.SceneLoading.Runtime.Loaders.RoomUnloadManager.maxLoadedRooms
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.Loaders
      source:
        id: maxLoadedRooms
        path: ''
        startLine: 476
      syntax:
        content:
          CSharp: public int maxLoadedRooms
          VB: Public maxLoadedRooms As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Packages.SceneLoading.Runtime.Loaders.RoomUnloadManager.managedRooms
      commentId: F:Packages.SceneLoading.Runtime.Loaders.RoomUnloadManager.managedRooms
      language: CSharp
      name:
        CSharp: managedRooms
        VB: managedRooms
      nameWithType:
        CSharp: RoomUnloadManager.managedRooms
        VB: RoomUnloadManager.managedRooms
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.Loaders.RoomUnloadManager.managedRooms
        VB: Packages.SceneLoading.Runtime.Loaders.RoomUnloadManager.managedRooms
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.Loaders
      source:
        id: managedRooms
        path: ''
        startLine: 480
      syntax:
        content:
          CSharp: public RoomInfoList managedRooms
          VB: Public managedRooms As RoomInfoList
        return:
          type: Global.RoomInfoList
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Packages.SceneLoading.Runtime.Loaders.RoomUnloadManager.playerCurrentRoom
      commentId: F:Packages.SceneLoading.Runtime.Loaders.RoomUnloadManager.playerCurrentRoom
      language: CSharp
      name:
        CSharp: playerCurrentRoom
        VB: playerCurrentRoom
      nameWithType:
        CSharp: RoomUnloadManager.playerCurrentRoom
        VB: RoomUnloadManager.playerCurrentRoom
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.Loaders.RoomUnloadManager.playerCurrentRoom
        VB: Packages.SceneLoading.Runtime.Loaders.RoomUnloadManager.playerCurrentRoom
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.Loaders
      source:
        id: playerCurrentRoom
        path: ''
        startLine: 483
      syntax:
        content:
          CSharp: public PersistentString playerCurrentRoom
          VB: Public playerCurrentRoom As PersistentString
        return:
          type: Global.PersistentString
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Packages.SceneLoading.Runtime.Loaders.SceneManagerExt
    commentId: T:Packages.SceneLoading.Runtime.Loaders.SceneManagerExt
    language: CSharp
    name:
      CSharp: SceneManagerExt
      VB: SceneManagerExt
    nameWithType:
      CSharp: SceneManagerExt
      VB: SceneManagerExt
    qualifiedName:
      CSharp: Packages.SceneLoading.Runtime.Loaders.SceneManagerExt
      VB: Packages.SceneLoading.Runtime.Loaders.SceneManagerExt
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Packages.SceneLoading.Runtime.Loaders
    source:
      id: SceneManagerExt
      path: ''
      startLine: 618
    summary: "\nAdditionnal methods for Scene management.\n"
    example: []
    syntax:
      content:
        CSharp: public static class SceneManagerExt
        VB: Public Module SceneManagerExt
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: Packages.SceneLoading.Runtime.Loaders.SceneManagerExt.LoadSubSceneAsync(System.String)
      commentId: M:Packages.SceneLoading.Runtime.Loaders.SceneManagerExt.LoadSubSceneAsync(System.String)
      language: CSharp
      name:
        CSharp: LoadSubSceneAsync(String)
        VB: LoadSubSceneAsync(String)
      nameWithType:
        CSharp: SceneManagerExt.LoadSubSceneAsync(String)
        VB: SceneManagerExt.LoadSubSceneAsync(String)
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.Loaders.SceneManagerExt.LoadSubSceneAsync(System.String)
        VB: Packages.SceneLoading.Runtime.Loaders.SceneManagerExt.LoadSubSceneAsync(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.Loaders
      source:
        id: LoadSubSceneAsync
        path: ''
        startLine: 629
      summary: "\nLoads the given scene additively only if it&apos;s not already loaded. \nYields until the loading is completed.\n"
      remarks: "\nNote that calling this method while the scene is already loading \nwill result in the scene being loaded twice.\n"
      example: []
      syntax:
        content:
          CSharp: public static IEnumerator LoadSubSceneAsync(string scenePath)
          VB: Public Shared Function LoadSubSceneAsync(scenePath As String) As IEnumerator
        parameters:
        - id: scenePath
          type: System.String
          description: Path to the scene relative to the Assets folder.
        return:
          type: System.Collections.IEnumerator
      overload: Packages.SceneLoading.Runtime.Loaders.SceneManagerExt.LoadSubSceneAsync*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
- id: Packages.SceneLoading.Runtime.SceneInfos
  commentId: N:Packages.SceneLoading.Runtime.SceneInfos
  language: CSharp
  name:
    CSharp: Packages.SceneLoading.Runtime.SceneInfos
    VB: Packages.SceneLoading.Runtime.SceneInfos
  nameWithType:
    CSharp: Packages.SceneLoading.Runtime.SceneInfos
    VB: Packages.SceneLoading.Runtime.SceneInfos
  qualifiedName:
    CSharp: Packages.SceneLoading.Runtime.SceneInfos
    VB: Packages.SceneLoading.Runtime.SceneInfos
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Packages.SceneLoading.Runtime.SceneInfos.GameplayInfo
    commentId: T:Packages.SceneLoading.Runtime.SceneInfos.GameplayInfo
    language: CSharp
    name:
      CSharp: GameplayInfo
      VB: GameplayInfo
    nameWithType:
      CSharp: GameplayInfo
      VB: GameplayInfo
    qualifiedName:
      CSharp: Packages.SceneLoading.Runtime.SceneInfos.GameplayInfo
      VB: Packages.SceneLoading.Runtime.SceneInfos.GameplayInfo
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Packages.SceneLoading.Runtime.SceneInfos
    source:
      id: GameplayInfo
      path: ''
      startLine: 657
    summary: "\nData about a Gameplay Scene.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GameplayInfo : SceneInfo'
        VB: >-
          Public Class GameplayInfo

              Inherits SceneInfo
    inheritance:
    - System.Object
    - Packages.SceneLoading.Runtime.SceneInfos.SceneInfo
    inheritedMembers:
    - Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.ScenePath
    - Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneFilename
    - Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.DisplayName
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Packages.SceneLoading.Runtime.SceneInfos.GameplayInfo.TypeName
      commentId: F:Packages.SceneLoading.Runtime.SceneInfos.GameplayInfo.TypeName
      language: CSharp
      name:
        CSharp: TypeName
        VB: TypeName
      nameWithType:
        CSharp: GameplayInfo.TypeName
        VB: GameplayInfo.TypeName
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.SceneInfos.GameplayInfo.TypeName
        VB: Packages.SceneLoading.Runtime.SceneInfos.GameplayInfo.TypeName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.SceneInfos
      source:
        id: TypeName
        path: ''
        startLine: 661
      syntax:
        content:
          CSharp: public const string TypeName = "Gameplay"
          VB: Public Const TypeName As String = "Gameplay"
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Packages.SceneLoading.Runtime.SceneInfos.GameplayInfo.SceneType
      commentId: P:Packages.SceneLoading.Runtime.SceneInfos.GameplayInfo.SceneType
      language: CSharp
      name:
        CSharp: SceneType
        VB: SceneType
      nameWithType:
        CSharp: GameplayInfo.SceneType
        VB: GameplayInfo.SceneType
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.SceneInfos.GameplayInfo.SceneType
        VB: Packages.SceneLoading.Runtime.SceneInfos.GameplayInfo.SceneType
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.SceneInfos
      source:
        id: SceneType
        path: ''
        startLine: 663
      syntax:
        content:
          CSharp: public override string SceneType { get; }
          VB: Public Overrides ReadOnly Property SceneType As String
        parameters: []
        return:
          type: System.String
      overload: Packages.SceneLoading.Runtime.SceneInfos.GameplayInfo.SceneType*
      overridden: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneType
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
  - id: Packages.SceneLoading.Runtime.SceneInfos.MainSceneInfo
    commentId: T:Packages.SceneLoading.Runtime.SceneInfos.MainSceneInfo
    language: CSharp
    name:
      CSharp: MainSceneInfo
      VB: MainSceneInfo
    nameWithType:
      CSharp: MainSceneInfo
      VB: MainSceneInfo
    qualifiedName:
      CSharp: Packages.SceneLoading.Runtime.SceneInfos.MainSceneInfo
      VB: Packages.SceneLoading.Runtime.SceneInfos.MainSceneInfo
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Packages.SceneLoading.Runtime.SceneInfos
    source:
      id: MainSceneInfo
      path: ''
      startLine: 673
    summary: "\nData about a Scene that will control the loading of other Scenes.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class MainSceneInfo : SceneInfo'
        VB: >-
          Public Class MainSceneInfo

              Inherits SceneInfo
    inheritance:
    - System.Object
    - Packages.SceneLoading.Runtime.SceneInfos.SceneInfo
    inheritedMembers:
    - Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.ScenePath
    - Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneFilename
    - Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.DisplayName
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Packages.SceneLoading.Runtime.SceneInfos.MainSceneInfo.TypeName
      commentId: F:Packages.SceneLoading.Runtime.SceneInfos.MainSceneInfo.TypeName
      language: CSharp
      name:
        CSharp: TypeName
        VB: TypeName
      nameWithType:
        CSharp: MainSceneInfo.TypeName
        VB: MainSceneInfo.TypeName
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.SceneInfos.MainSceneInfo.TypeName
        VB: Packages.SceneLoading.Runtime.SceneInfos.MainSceneInfo.TypeName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.SceneInfos
      source:
        id: TypeName
        path: ''
        startLine: 677
      syntax:
        content:
          CSharp: public const string TypeName = "MainScene"
          VB: Public Const TypeName As String = "MainScene"
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Packages.SceneLoading.Runtime.SceneInfos.MainSceneInfo.SceneType
      commentId: P:Packages.SceneLoading.Runtime.SceneInfos.MainSceneInfo.SceneType
      language: CSharp
      name:
        CSharp: SceneType
        VB: SceneType
      nameWithType:
        CSharp: MainSceneInfo.SceneType
        VB: MainSceneInfo.SceneType
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.SceneInfos.MainSceneInfo.SceneType
        VB: Packages.SceneLoading.Runtime.SceneInfos.MainSceneInfo.SceneType
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.SceneInfos
      source:
        id: SceneType
        path: ''
        startLine: 679
      syntax:
        content:
          CSharp: public override string SceneType { get; }
          VB: Public Overrides ReadOnly Property SceneType As String
        parameters: []
        return:
          type: System.String
      overload: Packages.SceneLoading.Runtime.SceneInfos.MainSceneInfo.SceneType*
      overridden: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneType
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
  - id: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo
    commentId: T:Packages.SceneLoading.Runtime.SceneInfos.RoomInfo
    language: CSharp
    name:
      CSharp: RoomInfo
      VB: RoomInfo
    nameWithType:
      CSharp: RoomInfo
      VB: RoomInfo
    qualifiedName:
      CSharp: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo
      VB: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Packages.SceneLoading.Runtime.SceneInfos
    source:
      id: RoomInfo
      path: ''
      startLine: 689
    summary: "\nData about a Room Scene.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class RoomInfo : SceneInfo'
        VB: >-
          Public Class RoomInfo

              Inherits SceneInfo
    inheritance:
    - System.Object
    - Packages.SceneLoading.Runtime.SceneInfos.SceneInfo
    inheritedMembers:
    - Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.ScenePath
    - Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneFilename
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo.TypeName
      commentId: F:Packages.SceneLoading.Runtime.SceneInfos.RoomInfo.TypeName
      language: CSharp
      name:
        CSharp: TypeName
        VB: TypeName
      nameWithType:
        CSharp: RoomInfo.TypeName
        VB: RoomInfo.TypeName
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo.TypeName
        VB: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo.TypeName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.SceneInfos
      source:
        id: TypeName
        path: ''
        startLine: 701
      syntax:
        content:
          CSharp: public const string TypeName = "Room"
          VB: Public Const TypeName As String = "Room"
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo.SceneType
      commentId: P:Packages.SceneLoading.Runtime.SceneInfos.RoomInfo.SceneType
      language: CSharp
      name:
        CSharp: SceneType
        VB: SceneType
      nameWithType:
        CSharp: RoomInfo.SceneType
        VB: RoomInfo.SceneType
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo.SceneType
        VB: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo.SceneType
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.SceneInfos
      source:
        id: SceneType
        path: ''
        startLine: 703
      syntax:
        content:
          CSharp: public override string SceneType { get; }
          VB: Public Overrides ReadOnly Property SceneType As String
        parameters: []
        return:
          type: System.String
      overload: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo.SceneType*
      overridden: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneType
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo.DisplayName
      commentId: P:Packages.SceneLoading.Runtime.SceneInfos.RoomInfo.DisplayName
      language: CSharp
      name:
        CSharp: DisplayName
        VB: DisplayName
      nameWithType:
        CSharp: RoomInfo.DisplayName
        VB: RoomInfo.DisplayName
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo.DisplayName
        VB: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo.DisplayName
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.SceneInfos
      source:
        id: DisplayName
        path: ''
        startLine: 705
      syntax:
        content:
          CSharp: public override string DisplayName { get; }
          VB: Public Overrides ReadOnly Property DisplayName As String
        parameters: []
        return:
          type: System.String
      overload: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo.DisplayName*
      overridden: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.DisplayName
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
  - id: Packages.SceneLoading.Runtime.SceneInfos.RoomInfoList
    commentId: T:Packages.SceneLoading.Runtime.SceneInfos.RoomInfoList
    language: CSharp
    name:
      CSharp: RoomInfoList
      VB: RoomInfoList
    nameWithType:
      CSharp: RoomInfoList
      VB: RoomInfoList
    qualifiedName:
      CSharp: Packages.SceneLoading.Runtime.SceneInfos.RoomInfoList
      VB: Packages.SceneLoading.Runtime.SceneInfos.RoomInfoList
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Packages.SceneLoading.Runtime.SceneInfos
    source:
      id: RoomInfoList
      path: ''
      startLine: 727
    summary: "\nA collection of Rooms. Usually represents an area the player can explore.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class RoomInfoList : ScriptableObject'
        VB: >-
          Public Class RoomInfoList

              Inherits ScriptableObject
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Packages.SceneLoading.Runtime.SceneInfos.RoomInfoList.RoomInfos
      commentId: P:Packages.SceneLoading.Runtime.SceneInfos.RoomInfoList.RoomInfos
      language: CSharp
      name:
        CSharp: RoomInfos
        VB: RoomInfos
      nameWithType:
        CSharp: RoomInfoList.RoomInfos
        VB: RoomInfoList.RoomInfos
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.SceneInfos.RoomInfoList.RoomInfos
        VB: Packages.SceneLoading.Runtime.SceneInfos.RoomInfoList.RoomInfos
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.SceneInfos
      source:
        id: RoomInfos
        path: ''
        startLine: 734
      syntax:
        content:
          CSharp: public IReadOnlyCollection<RoomInfo> RoomInfos { get; }
          VB: Public ReadOnly Property RoomInfos As IReadOnlyCollection(Of RoomInfo)
        parameters: []
        return:
          type: Global.IReadOnlyCollection{Packages.SceneLoading.Runtime.SceneInfos.RoomInfo}
      overload: Packages.SceneLoading.Runtime.SceneInfos.RoomInfoList.RoomInfos*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
  - id: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo
    commentId: T:Packages.SceneLoading.Runtime.SceneInfos.SceneInfo
    language: CSharp
    name:
      CSharp: SceneInfo
      VB: SceneInfo
    nameWithType:
      CSharp: SceneInfo
      VB: SceneInfo
    qualifiedName:
      CSharp: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo
      VB: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Packages.SceneLoading.Runtime.SceneInfos
    source:
      id: SceneInfo
      path: ''
      startLine: 746
    summary: "\nData about a Scene.\n"
    example: []
    syntax:
      content:
        CSharp: 'public abstract class SceneInfo : ScriptableObject'
        VB: >-
          Public MustInherit Class SceneInfo

              Inherits ScriptableObject
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.ScenePath
      commentId: P:Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.ScenePath
      language: CSharp
      name:
        CSharp: ScenePath
        VB: ScenePath
      nameWithType:
        CSharp: SceneInfo.ScenePath
        VB: SceneInfo.ScenePath
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.ScenePath
        VB: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.ScenePath
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.SceneInfos
      source:
        id: ScenePath
        path: ''
        startLine: 752
      syntax:
        content:
          CSharp: public string ScenePath { get; }
          VB: Public ReadOnly Property ScenePath As String
        parameters: []
        return:
          type: System.String
      overload: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.ScenePath*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneFilename
      commentId: P:Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneFilename
      language: CSharp
      name:
        CSharp: SceneFilename
        VB: SceneFilename
      nameWithType:
        CSharp: SceneInfo.SceneFilename
        VB: SceneInfo.SceneFilename
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneFilename
        VB: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneFilename
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.SceneInfos
      source:
        id: SceneFilename
        path: ''
        startLine: 754
      syntax:
        content:
          CSharp: public string SceneFilename { get; }
          VB: Public ReadOnly Property SceneFilename As String
        parameters: []
        return:
          type: System.String
      overload: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneFilename*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneType
      commentId: P:Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneType
      language: CSharp
      name:
        CSharp: SceneType
        VB: SceneType
      nameWithType:
        CSharp: SceneInfo.SceneType
        VB: SceneInfo.SceneType
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneType
        VB: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneType
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.SceneInfos
      source:
        id: SceneType
        path: ''
        startLine: 756
      syntax:
        content:
          CSharp: public virtual string SceneType { get; }
          VB: Public Overridable ReadOnly Property SceneType As String
        parameters: []
        return:
          type: System.String
      overload: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneType*
      modifiers:
        CSharp:
        - public
        - virtual
        - get
        VB:
        - Public
        - Overridable
        - ReadOnly
    - id: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.DisplayName
      commentId: P:Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.DisplayName
      language: CSharp
      name:
        CSharp: DisplayName
        VB: DisplayName
      nameWithType:
        CSharp: SceneInfo.DisplayName
        VB: SceneInfo.DisplayName
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.DisplayName
        VB: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.DisplayName
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.SceneInfos
      source:
        id: DisplayName
        path: ''
        startLine: 758
      syntax:
        content:
          CSharp: public virtual string DisplayName { get; }
          VB: Public Overridable ReadOnly Property DisplayName As String
        parameters: []
        return:
          type: System.String
      overload: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.DisplayName*
      modifiers:
        CSharp:
        - public
        - virtual
        - get
        VB:
        - Public
        - Overridable
        - ReadOnly
- id: Packages.SceneLoading.Runtime.SceneRefs
  commentId: N:Packages.SceneLoading.Runtime.SceneRefs
  language: CSharp
  name:
    CSharp: Packages.SceneLoading.Runtime.SceneRefs
    VB: Packages.SceneLoading.Runtime.SceneRefs
  nameWithType:
    CSharp: Packages.SceneLoading.Runtime.SceneRefs
    VB: Packages.SceneLoading.Runtime.SceneRefs
  qualifiedName:
    CSharp: Packages.SceneLoading.Runtime.SceneRefs
    VB: Packages.SceneLoading.Runtime.SceneRefs
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Packages.SceneLoading.Runtime.SceneRefs.SceneReference
    commentId: T:Packages.SceneLoading.Runtime.SceneRefs.SceneReference
    language: CSharp
    name:
      CSharp: SceneReference
      VB: SceneReference
    nameWithType:
      CSharp: SceneReference
      VB: SceneReference
    qualifiedName:
      CSharp: Packages.SceneLoading.Runtime.SceneRefs.SceneReference
      VB: Packages.SceneLoading.Runtime.SceneRefs.SceneReference
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Packages.SceneLoading.Runtime.SceneRefs
    source:
      id: SceneReference
      path: ''
      startLine: 796
    summary: "\nA wrapper that provides the means to safely serialize Scene Asset References.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class SceneReference : ISerializationCallbackReceiver
        VB: >-
          <Serializable>

          Public Class SceneReference

              Inherits ISerializationCallbackReceiver
    inheritance:
    - System.Object
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.ScenePath
      commentId: P:Packages.SceneLoading.Runtime.SceneRefs.SceneReference.ScenePath
      language: CSharp
      name:
        CSharp: ScenePath
        VB: ScenePath
      nameWithType:
        CSharp: SceneReference.ScenePath
        VB: SceneReference.ScenePath
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.ScenePath
        VB: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.ScenePath
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.SceneRefs
      source:
        id: ScenePath
        path: ''
        startLine: 803
      syntax:
        content:
          CSharp: public string ScenePath { get; set; }
          VB: Public Property ScenePath As String
        parameters: []
        return:
          type: System.String
      overload: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.ScenePath*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.OnBeforeSerialize
      commentId: M:Packages.SceneLoading.Runtime.SceneRefs.SceneReference.OnBeforeSerialize
      language: CSharp
      name:
        CSharp: OnBeforeSerialize()
        VB: OnBeforeSerialize()
      nameWithType:
        CSharp: SceneReference.OnBeforeSerialize()
        VB: SceneReference.OnBeforeSerialize()
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.OnBeforeSerialize()
        VB: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.OnBeforeSerialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.SceneRefs
      source:
        id: OnBeforeSerialize
        path: ''
        startLine: 826
      syntax:
        content:
          CSharp: public void OnBeforeSerialize()
          VB: Public Sub OnBeforeSerialize
      overload: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.OnBeforeSerialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.OnAfterDeserialize
      commentId: M:Packages.SceneLoading.Runtime.SceneRefs.SceneReference.OnAfterDeserialize
      language: CSharp
      name:
        CSharp: OnAfterDeserialize()
        VB: OnAfterDeserialize()
      nameWithType:
        CSharp: SceneReference.OnAfterDeserialize()
        VB: SceneReference.OnAfterDeserialize()
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.OnAfterDeserialize()
        VB: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.OnAfterDeserialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.SceneRefs
      source:
        id: OnAfterDeserialize
        path: ''
        startLine: 834
      syntax:
        content:
          CSharp: public void OnAfterDeserialize()
          VB: Public Sub OnAfterDeserialize
      overload: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.OnAfterDeserialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.op_Implicit(Packages.SceneLoading.Runtime.SceneRefs.SceneReference)~System.String
      commentId: M:Packages.SceneLoading.Runtime.SceneRefs.SceneReference.op_Implicit(Packages.SceneLoading.Runtime.SceneRefs.SceneReference)~System.String
      language: CSharp
      name:
        CSharp: Implicit(SceneReference to String)
        VB: Widening(SceneReference to String)
      nameWithType:
        CSharp: SceneReference.Implicit(SceneReference to String)
        VB: SceneReference.Widening(SceneReference to String)
      qualifiedName:
        CSharp: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.Implicit(Packages.SceneLoading.Runtime.SceneRefs.SceneReference to System.String)
        VB: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.Widening(Packages.SceneLoading.Runtime.SceneRefs.SceneReference to System.String)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Packages.SceneLoading.Runtime.SceneRefs
      source:
        id: op_Implicit
        path: ''
        startLine: 842
      syntax:
        content:
          CSharp: public static implicit operator string (SceneReference sceneReference)
          VB: Public Shared Widening Operator CType(sceneReference As SceneReference) As String
        parameters:
        - id: sceneReference
          type: Packages.SceneLoading.Runtime.SceneRefs.SceneReference
        return:
          type: System.String
      overload: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
references:
  Packages.SceneLoading.Runtime.Doors.Door:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.Doors.Door
        name: Door
        nameWithType: Door
        qualifiedName: Packages.SceneLoading.Runtime.Doors.Door
      VB:
      - id: Packages.SceneLoading.Runtime.Doors.Door
        name: Door
        nameWithType: Door
        qualifiedName: Packages.SceneLoading.Runtime.Doors.Door
    isDefinition: true
    commentId: T:Packages.SceneLoading.Runtime.Doors.Door
  Global.PersistentString:
    name:
      CSharp:
      - id: Global.PersistentString
        name: PersistentString
        nameWithType: PersistentString
        qualifiedName: PersistentString
        isExternal: true
      VB:
      - id: Global.PersistentString
        name: PersistentString
        nameWithType: PersistentString
        qualifiedName: PersistentString
        isExternal: true
    isDefinition: true
  Global.UnityEvent:
    name:
      CSharp:
      - id: Global.UnityEvent
        name: UnityEvent
        nameWithType: UnityEvent
        qualifiedName: UnityEvent
        isExternal: true
      VB:
      - id: Global.UnityEvent
        name: UnityEvent
        nameWithType: UnityEvent
        qualifiedName: UnityEvent
        isExternal: true
    isDefinition: true
  Packages.SceneLoading.Runtime.Doors.Door.RequestOpen*:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.Doors.Door.RequestOpen*
        name: RequestOpen
        nameWithType: Door.RequestOpen
        qualifiedName: Packages.SceneLoading.Runtime.Doors.Door.RequestOpen
      VB:
      - id: Packages.SceneLoading.Runtime.Doors.Door.RequestOpen*
        name: RequestOpen
        nameWithType: Door.RequestOpen
        qualifiedName: Packages.SceneLoading.Runtime.Doors.Door.RequestOpen
    isDefinition: true
    commentId: Overload:Packages.SceneLoading.Runtime.Doors.Door.RequestOpen
  Packages.SceneLoading.Runtime.Doors.Door.RequestClose*:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.Doors.Door.RequestClose*
        name: RequestClose
        nameWithType: Door.RequestClose
        qualifiedName: Packages.SceneLoading.Runtime.Doors.Door.RequestClose
      VB:
      - id: Packages.SceneLoading.Runtime.Doors.Door.RequestClose*
        name: RequestClose
        nameWithType: Door.RequestClose
        qualifiedName: Packages.SceneLoading.Runtime.Doors.Door.RequestClose
    isDefinition: true
    commentId: Overload:Packages.SceneLoading.Runtime.Doors.Door.RequestClose
  Packages.SceneLoading.Runtime.Doors:
    name:
      CSharp:
      - name: Packages.SceneLoading.Runtime.Doors
        nameWithType: Packages.SceneLoading.Runtime.Doors
        qualifiedName: Packages.SceneLoading.Runtime.Doors
      VB:
      - name: Packages.SceneLoading.Runtime.Doors
        nameWithType: Packages.SceneLoading.Runtime.Doors
        qualifiedName: Packages.SceneLoading.Runtime.Doors
    isDefinition: true
    commentId: N:Packages.SceneLoading.Runtime.Doors
  Packages.SceneLoading.Runtime.Doors.DoorState:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.Doors.DoorState
        name: DoorState
        nameWithType: DoorState
        qualifiedName: Packages.SceneLoading.Runtime.Doors.DoorState
      VB:
      - id: Packages.SceneLoading.Runtime.Doors.DoorState
        name: DoorState
        nameWithType: DoorState
        qualifiedName: Packages.SceneLoading.Runtime.Doors.DoorState
    isDefinition: true
    parent: Packages.SceneLoading.Runtime.Doors
    commentId: T:Packages.SceneLoading.Runtime.Doors.DoorState
  Packages.SceneLoading.Runtime.Doors.DoorPairing.State*:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.Doors.DoorPairing.State*
        name: State
        nameWithType: DoorPairing.State
        qualifiedName: Packages.SceneLoading.Runtime.Doors.DoorPairing.State
      VB:
      - id: Packages.SceneLoading.Runtime.Doors.DoorPairing.State*
        name: State
        nameWithType: DoorPairing.State
        qualifiedName: Packages.SceneLoading.Runtime.Doors.DoorPairing.State
    isDefinition: true
    commentId: Overload:Packages.SceneLoading.Runtime.Doors.DoorPairing.State
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  Packages.SceneLoading.Runtime.Doors.DoorPairing.FrontScenePath*:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.Doors.DoorPairing.FrontScenePath*
        name: FrontScenePath
        nameWithType: DoorPairing.FrontScenePath
        qualifiedName: Packages.SceneLoading.Runtime.Doors.DoorPairing.FrontScenePath
      VB:
      - id: Packages.SceneLoading.Runtime.Doors.DoorPairing.FrontScenePath*
        name: FrontScenePath
        nameWithType: DoorPairing.FrontScenePath
        qualifiedName: Packages.SceneLoading.Runtime.Doors.DoorPairing.FrontScenePath
    isDefinition: true
    commentId: Overload:Packages.SceneLoading.Runtime.Doors.DoorPairing.FrontScenePath
  Packages.SceneLoading.Runtime.Doors.DoorPairing.BackScenePath*:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.Doors.DoorPairing.BackScenePath*
        name: BackScenePath
        nameWithType: DoorPairing.BackScenePath
        qualifiedName: Packages.SceneLoading.Runtime.Doors.DoorPairing.BackScenePath
      VB:
      - id: Packages.SceneLoading.Runtime.Doors.DoorPairing.BackScenePath*
        name: BackScenePath
        nameWithType: DoorPairing.BackScenePath
        qualifiedName: Packages.SceneLoading.Runtime.Doors.DoorPairing.BackScenePath
    isDefinition: true
    commentId: Overload:Packages.SceneLoading.Runtime.Doors.DoorPairing.BackScenePath
  System.Action`1:
    name:
      CSharp:
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Action`1
  System.Action{Packages.SceneLoading.Runtime.Doors.DoorState}:
    name:
      CSharp:
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Packages.SceneLoading.Runtime.Doors.DoorState
        name: DoorState
        nameWithType: DoorState
        qualifiedName: Packages.SceneLoading.Runtime.Doors.DoorState
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Packages.SceneLoading.Runtime.Doors.DoorState
        name: DoorState
        nameWithType: DoorState
        qualifiedName: Packages.SceneLoading.Runtime.Doors.DoorState
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Action`1
    parent: System
    commentId: T:System.Action{Packages.SceneLoading.Runtime.Doors.DoorState}
  Packages.SceneLoading.Runtime.Doors.DoorPairing.SetState*:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.Doors.DoorPairing.SetState*
        name: SetState
        nameWithType: DoorPairing.SetState
        qualifiedName: Packages.SceneLoading.Runtime.Doors.DoorPairing.SetState
      VB:
      - id: Packages.SceneLoading.Runtime.Doors.DoorPairing.SetState*
        name: SetState
        nameWithType: DoorPairing.SetState
        qualifiedName: Packages.SceneLoading.Runtime.Doors.DoorPairing.SetState
    isDefinition: true
    commentId: Overload:Packages.SceneLoading.Runtime.Doors.DoorPairing.SetState
  Packages.SceneLoading.Runtime.Doors.DoorPairing:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.Doors.DoorPairing
        name: DoorPairing
        nameWithType: DoorPairing
        qualifiedName: Packages.SceneLoading.Runtime.Doors.DoorPairing
      VB:
      - id: Packages.SceneLoading.Runtime.Doors.DoorPairing
        name: DoorPairing
        nameWithType: DoorPairing
        qualifiedName: Packages.SceneLoading.Runtime.Doors.DoorPairing
    isDefinition: true
    commentId: T:Packages.SceneLoading.Runtime.Doors.DoorPairing
  Global.MainSceneInfo:
    name:
      CSharp:
      - id: Global.MainSceneInfo
        name: MainSceneInfo
        nameWithType: MainSceneInfo
        qualifiedName: MainSceneInfo
        isExternal: true
      VB:
      - id: Global.MainSceneInfo
        name: MainSceneInfo
        nameWithType: MainSceneInfo
        qualifiedName: MainSceneInfo
        isExternal: true
    isDefinition: true
    commentId: '!:Global.MainSceneInfo'
  Global.UnityFloatEvent:
    name:
      CSharp:
      - id: Global.UnityFloatEvent
        name: UnityFloatEvent
        nameWithType: UnityFloatEvent
        qualifiedName: UnityFloatEvent
        isExternal: true
      VB:
      - id: Global.UnityFloatEvent
        name: UnityFloatEvent
        nameWithType: UnityFloatEvent
        qualifiedName: UnityFloatEvent
        isExternal: true
    isDefinition: true
    commentId: '!:Global.UnityFloatEvent'
  Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.Activate:
    commentId: M:Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.Activate
  Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.onReadyToActivate:
    commentId: F:Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.onReadyToActivate
  Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.Preload*:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.Preload*
        name: Preload
        nameWithType: MainSceneLoader.Preload
        qualifiedName: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.Preload
      VB:
      - id: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.Preload*
        name: Preload
        nameWithType: MainSceneLoader.Preload
        qualifiedName: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.Preload
    isDefinition: true
    commentId: Overload:Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.Preload
  System.Collections:
    name:
      CSharp:
      - name: System.Collections
        nameWithType: System.Collections
        qualifiedName: System.Collections
        isExternal: true
      VB:
      - name: System.Collections
        nameWithType: System.Collections
        qualifiedName: System.Collections
    isDefinition: true
    commentId: N:System.Collections
  System.Collections.IEnumerator:
    name:
      CSharp:
      - id: System.Collections.IEnumerator
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.IEnumerator
        isExternal: true
      VB:
      - id: System.Collections.IEnumerator
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.IEnumerator
        isExternal: true
    isDefinition: true
    parent: System.Collections
    commentId: T:System.Collections.IEnumerator
  Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.PreloadAsync*:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.PreloadAsync*
        name: PreloadAsync
        nameWithType: MainSceneLoader.PreloadAsync
        qualifiedName: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.PreloadAsync
      VB:
      - id: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.PreloadAsync*
        name: PreloadAsync
        nameWithType: MainSceneLoader.PreloadAsync
        qualifiedName: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.PreloadAsync
    isDefinition: true
    commentId: Overload:Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.PreloadAsync
  Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.Activate*:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.Activate*
        name: Activate
        nameWithType: MainSceneLoader.Activate
        qualifiedName: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.Activate
      VB:
      - id: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.Activate*
        name: Activate
        nameWithType: MainSceneLoader.Activate
        qualifiedName: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.Activate
    isDefinition: true
    commentId: Overload:Packages.SceneLoading.Runtime.Loaders.MainSceneLoader.Activate
  Packages.SceneLoading.Runtime.Loaders.MainSceneLoader:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader
        name: MainSceneLoader
        nameWithType: MainSceneLoader
        qualifiedName: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader
      VB:
      - id: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader
        name: MainSceneLoader
        nameWithType: MainSceneLoader
        qualifiedName: Packages.SceneLoading.Runtime.Loaders.MainSceneLoader
    isDefinition: true
    commentId: T:Packages.SceneLoading.Runtime.Loaders.MainSceneLoader
  Global.RoomInfo:
    name:
      CSharp:
      - id: Global.RoomInfo
        name: RoomInfo
        nameWithType: RoomInfo
        qualifiedName: RoomInfo
        isExternal: true
      VB:
      - id: Global.RoomInfo
        name: RoomInfo
        nameWithType: RoomInfo
        qualifiedName: RoomInfo
        isExternal: true
    isDefinition: true
    commentId: '!:Global.RoomInfo'
  Packages.SceneLoading.Runtime.Loaders.RoomLoader.Load*:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.Loaders.RoomLoader.Load*
        name: Load
        nameWithType: RoomLoader.Load
        qualifiedName: Packages.SceneLoading.Runtime.Loaders.RoomLoader.Load
      VB:
      - id: Packages.SceneLoading.Runtime.Loaders.RoomLoader.Load*
        name: Load
        nameWithType: RoomLoader.Load
        qualifiedName: Packages.SceneLoading.Runtime.Loaders.RoomLoader.Load
    isDefinition: true
    commentId: Overload:Packages.SceneLoading.Runtime.Loaders.RoomLoader.Load
  Packages.SceneLoading.Runtime.Loaders.RoomLoader.LoadAsync*:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.Loaders.RoomLoader.LoadAsync*
        name: LoadAsync
        nameWithType: RoomLoader.LoadAsync
        qualifiedName: Packages.SceneLoading.Runtime.Loaders.RoomLoader.LoadAsync
      VB:
      - id: Packages.SceneLoading.Runtime.Loaders.RoomLoader.LoadAsync*
        name: LoadAsync
        nameWithType: RoomLoader.LoadAsync
        qualifiedName: Packages.SceneLoading.Runtime.Loaders.RoomLoader.LoadAsync
    isDefinition: true
    commentId: Overload:Packages.SceneLoading.Runtime.Loaders.RoomLoader.LoadAsync
  Packages.SceneLoading.Runtime.Loaders.RoomLoader:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.Loaders.RoomLoader
        name: RoomLoader
        nameWithType: RoomLoader
        qualifiedName: Packages.SceneLoading.Runtime.Loaders.RoomLoader
      VB:
      - id: Packages.SceneLoading.Runtime.Loaders.RoomLoader
        name: RoomLoader
        nameWithType: RoomLoader
        qualifiedName: Packages.SceneLoading.Runtime.Loaders.RoomLoader
    isDefinition: true
    commentId: T:Packages.SceneLoading.Runtime.Loaders.RoomLoader
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  Global.RoomInfoList:
    name:
      CSharp:
      - id: Global.RoomInfoList
        name: RoomInfoList
        nameWithType: RoomInfoList
        qualifiedName: RoomInfoList
        isExternal: true
      VB:
      - id: Global.RoomInfoList
        name: RoomInfoList
        nameWithType: RoomInfoList
        qualifiedName: RoomInfoList
        isExternal: true
    isDefinition: true
    commentId: '!:Global.RoomInfoList'
  Packages.SceneLoading.Runtime.Loaders.RoomUnloadManager:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.Loaders.RoomUnloadManager
        name: RoomUnloadManager
        nameWithType: RoomUnloadManager
        qualifiedName: Packages.SceneLoading.Runtime.Loaders.RoomUnloadManager
      VB:
      - id: Packages.SceneLoading.Runtime.Loaders.RoomUnloadManager
        name: RoomUnloadManager
        nameWithType: RoomUnloadManager
        qualifiedName: Packages.SceneLoading.Runtime.Loaders.RoomUnloadManager
    isDefinition: true
    commentId: T:Packages.SceneLoading.Runtime.Loaders.RoomUnloadManager
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  Packages.SceneLoading.Runtime.Loaders.SceneManagerExt.LoadSubSceneAsync*:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.Loaders.SceneManagerExt.LoadSubSceneAsync*
        name: LoadSubSceneAsync
        nameWithType: SceneManagerExt.LoadSubSceneAsync
        qualifiedName: Packages.SceneLoading.Runtime.Loaders.SceneManagerExt.LoadSubSceneAsync
      VB:
      - id: Packages.SceneLoading.Runtime.Loaders.SceneManagerExt.LoadSubSceneAsync*
        name: LoadSubSceneAsync
        nameWithType: SceneManagerExt.LoadSubSceneAsync
        qualifiedName: Packages.SceneLoading.Runtime.Loaders.SceneManagerExt.LoadSubSceneAsync
    isDefinition: true
    commentId: Overload:Packages.SceneLoading.Runtime.Loaders.SceneManagerExt.LoadSubSceneAsync
  Packages.SceneLoading.Runtime.Loaders.SceneManagerExt:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.Loaders.SceneManagerExt
        name: SceneManagerExt
        nameWithType: SceneManagerExt
        qualifiedName: Packages.SceneLoading.Runtime.Loaders.SceneManagerExt
      VB:
      - id: Packages.SceneLoading.Runtime.Loaders.SceneManagerExt
        name: SceneManagerExt
        nameWithType: SceneManagerExt
        qualifiedName: Packages.SceneLoading.Runtime.Loaders.SceneManagerExt
    isDefinition: true
    commentId: T:Packages.SceneLoading.Runtime.Loaders.SceneManagerExt
  Packages.SceneLoading.Runtime.Loaders:
    name:
      CSharp:
      - name: Packages.SceneLoading.Runtime.Loaders
        nameWithType: Packages.SceneLoading.Runtime.Loaders
        qualifiedName: Packages.SceneLoading.Runtime.Loaders
      VB:
      - name: Packages.SceneLoading.Runtime.Loaders
        nameWithType: Packages.SceneLoading.Runtime.Loaders
        qualifiedName: Packages.SceneLoading.Runtime.Loaders
    isDefinition: true
    commentId: N:Packages.SceneLoading.Runtime.Loaders
  Packages.SceneLoading.Runtime.SceneInfos:
    name:
      CSharp:
      - name: Packages.SceneLoading.Runtime.SceneInfos
        nameWithType: Packages.SceneLoading.Runtime.SceneInfos
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos
      VB:
      - name: Packages.SceneLoading.Runtime.SceneInfos
        nameWithType: Packages.SceneLoading.Runtime.SceneInfos
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos
    isDefinition: true
    commentId: N:Packages.SceneLoading.Runtime.SceneInfos
  Packages.SceneLoading.Runtime.SceneInfos.SceneInfo:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo
        name: SceneInfo
        nameWithType: SceneInfo
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo
      VB:
      - id: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo
        name: SceneInfo
        nameWithType: SceneInfo
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo
    isDefinition: true
    parent: Packages.SceneLoading.Runtime.SceneInfos
    commentId: T:Packages.SceneLoading.Runtime.SceneInfos.SceneInfo
  Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.ScenePath:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.ScenePath
        name: ScenePath
        nameWithType: SceneInfo.ScenePath
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.ScenePath
      VB:
      - id: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.ScenePath
        name: ScenePath
        nameWithType: SceneInfo.ScenePath
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.ScenePath
    isDefinition: true
    parent: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo
    commentId: P:Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.ScenePath
  Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneFilename:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneFilename
        name: SceneFilename
        nameWithType: SceneInfo.SceneFilename
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneFilename
      VB:
      - id: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneFilename
        name: SceneFilename
        nameWithType: SceneInfo.SceneFilename
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneFilename
    isDefinition: true
    parent: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo
    commentId: P:Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneFilename
  Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.DisplayName:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.DisplayName
        name: DisplayName
        nameWithType: SceneInfo.DisplayName
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.DisplayName
      VB:
      - id: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.DisplayName
        name: DisplayName
        nameWithType: SceneInfo.DisplayName
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.DisplayName
    isDefinition: true
    parent: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo
    commentId: P:Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.DisplayName
  Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneType:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneType
        name: SceneType
        nameWithType: SceneInfo.SceneType
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneType
      VB:
      - id: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneType
        name: SceneType
        nameWithType: SceneInfo.SceneType
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneType
    isDefinition: true
    parent: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo
    commentId: P:Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneType
  Packages.SceneLoading.Runtime.SceneInfos.GameplayInfo.SceneType*:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.SceneInfos.GameplayInfo.SceneType*
        name: SceneType
        nameWithType: GameplayInfo.SceneType
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.GameplayInfo.SceneType
      VB:
      - id: Packages.SceneLoading.Runtime.SceneInfos.GameplayInfo.SceneType*
        name: SceneType
        nameWithType: GameplayInfo.SceneType
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.GameplayInfo.SceneType
    isDefinition: true
    commentId: Overload:Packages.SceneLoading.Runtime.SceneInfos.GameplayInfo.SceneType
  Packages.SceneLoading.Runtime.SceneInfos.GameplayInfo:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.SceneInfos.GameplayInfo
        name: GameplayInfo
        nameWithType: GameplayInfo
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.GameplayInfo
      VB:
      - id: Packages.SceneLoading.Runtime.SceneInfos.GameplayInfo
        name: GameplayInfo
        nameWithType: GameplayInfo
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.GameplayInfo
    isDefinition: true
    commentId: T:Packages.SceneLoading.Runtime.SceneInfos.GameplayInfo
  Packages.SceneLoading.Runtime.SceneInfos.MainSceneInfo.SceneType*:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.SceneInfos.MainSceneInfo.SceneType*
        name: SceneType
        nameWithType: MainSceneInfo.SceneType
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.MainSceneInfo.SceneType
      VB:
      - id: Packages.SceneLoading.Runtime.SceneInfos.MainSceneInfo.SceneType*
        name: SceneType
        nameWithType: MainSceneInfo.SceneType
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.MainSceneInfo.SceneType
    isDefinition: true
    commentId: Overload:Packages.SceneLoading.Runtime.SceneInfos.MainSceneInfo.SceneType
  Packages.SceneLoading.Runtime.SceneInfos.MainSceneInfo:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.SceneInfos.MainSceneInfo
        name: MainSceneInfo
        nameWithType: MainSceneInfo
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.MainSceneInfo
      VB:
      - id: Packages.SceneLoading.Runtime.SceneInfos.MainSceneInfo
        name: MainSceneInfo
        nameWithType: MainSceneInfo
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.MainSceneInfo
    isDefinition: true
    commentId: T:Packages.SceneLoading.Runtime.SceneInfos.MainSceneInfo
  Packages.SceneLoading.Runtime.SceneInfos.RoomInfo.SceneType*:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo.SceneType*
        name: SceneType
        nameWithType: RoomInfo.SceneType
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo.SceneType
      VB:
      - id: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo.SceneType*
        name: SceneType
        nameWithType: RoomInfo.SceneType
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo.SceneType
    isDefinition: true
    commentId: Overload:Packages.SceneLoading.Runtime.SceneInfos.RoomInfo.SceneType
  Packages.SceneLoading.Runtime.SceneInfos.RoomInfo.DisplayName*:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo.DisplayName*
        name: DisplayName
        nameWithType: RoomInfo.DisplayName
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo.DisplayName
      VB:
      - id: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo.DisplayName*
        name: DisplayName
        nameWithType: RoomInfo.DisplayName
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo.DisplayName
    isDefinition: true
    commentId: Overload:Packages.SceneLoading.Runtime.SceneInfos.RoomInfo.DisplayName
  Packages.SceneLoading.Runtime.SceneInfos.RoomInfo:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo
        name: RoomInfo
        nameWithType: RoomInfo
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo
      VB:
      - id: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo
        name: RoomInfo
        nameWithType: RoomInfo
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo
    isDefinition: true
    commentId: T:Packages.SceneLoading.Runtime.SceneInfos.RoomInfo
  Global.IReadOnlyCollection`1:
    name:
      CSharp:
      - id: Global.IReadOnlyCollection`1
        name: IReadOnlyCollection
        nameWithType: IReadOnlyCollection
        qualifiedName: IReadOnlyCollection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.IReadOnlyCollection`1
        name: IReadOnlyCollection
        nameWithType: IReadOnlyCollection
        qualifiedName: IReadOnlyCollection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: '!:Global.IReadOnlyCollection`1'
  Global.IReadOnlyCollection{Packages.SceneLoading.Runtime.SceneInfos.RoomInfo}:
    name:
      CSharp:
      - id: Global.IReadOnlyCollection`1
        name: IReadOnlyCollection
        nameWithType: IReadOnlyCollection
        qualifiedName: IReadOnlyCollection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo
        name: RoomInfo
        nameWithType: RoomInfo
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.IReadOnlyCollection`1
        name: IReadOnlyCollection
        nameWithType: IReadOnlyCollection
        qualifiedName: IReadOnlyCollection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo
        name: RoomInfo
        nameWithType: RoomInfo
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.RoomInfo
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.IReadOnlyCollection`1
    commentId: '!:Global.IReadOnlyCollection{Packages.SceneLoading.Runtime.SceneInfos.RoomInfo}'
  Packages.SceneLoading.Runtime.SceneInfos.RoomInfoList.RoomInfos*:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.SceneInfos.RoomInfoList.RoomInfos*
        name: RoomInfos
        nameWithType: RoomInfoList.RoomInfos
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.RoomInfoList.RoomInfos
      VB:
      - id: Packages.SceneLoading.Runtime.SceneInfos.RoomInfoList.RoomInfos*
        name: RoomInfos
        nameWithType: RoomInfoList.RoomInfos
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.RoomInfoList.RoomInfos
    isDefinition: true
    commentId: Overload:Packages.SceneLoading.Runtime.SceneInfos.RoomInfoList.RoomInfos
  Packages.SceneLoading.Runtime.SceneInfos.RoomInfoList:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.SceneInfos.RoomInfoList
        name: RoomInfoList
        nameWithType: RoomInfoList
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.RoomInfoList
      VB:
      - id: Packages.SceneLoading.Runtime.SceneInfos.RoomInfoList
        name: RoomInfoList
        nameWithType: RoomInfoList
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.RoomInfoList
    isDefinition: true
    commentId: T:Packages.SceneLoading.Runtime.SceneInfos.RoomInfoList
  Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.ScenePath*:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.ScenePath*
        name: ScenePath
        nameWithType: SceneInfo.ScenePath
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.ScenePath
      VB:
      - id: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.ScenePath*
        name: ScenePath
        nameWithType: SceneInfo.ScenePath
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.ScenePath
    isDefinition: true
    commentId: Overload:Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.ScenePath
  Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneFilename*:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneFilename*
        name: SceneFilename
        nameWithType: SceneInfo.SceneFilename
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneFilename
      VB:
      - id: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneFilename*
        name: SceneFilename
        nameWithType: SceneInfo.SceneFilename
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneFilename
    isDefinition: true
    commentId: Overload:Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneFilename
  Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneType*:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneType*
        name: SceneType
        nameWithType: SceneInfo.SceneType
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneType
      VB:
      - id: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneType*
        name: SceneType
        nameWithType: SceneInfo.SceneType
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneType
    isDefinition: true
    commentId: Overload:Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.SceneType
  Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.DisplayName*:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.DisplayName*
        name: DisplayName
        nameWithType: SceneInfo.DisplayName
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.DisplayName
      VB:
      - id: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.DisplayName*
        name: DisplayName
        nameWithType: SceneInfo.DisplayName
        qualifiedName: Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.DisplayName
    isDefinition: true
    commentId: Overload:Packages.SceneLoading.Runtime.SceneInfos.SceneInfo.DisplayName
  Packages.SceneLoading.Runtime.SceneRefs.SceneReference.ScenePath*:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.ScenePath*
        name: ScenePath
        nameWithType: SceneReference.ScenePath
        qualifiedName: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.ScenePath
      VB:
      - id: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.ScenePath*
        name: ScenePath
        nameWithType: SceneReference.ScenePath
        qualifiedName: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.ScenePath
    isDefinition: true
    commentId: Overload:Packages.SceneLoading.Runtime.SceneRefs.SceneReference.ScenePath
  Packages.SceneLoading.Runtime.SceneRefs.SceneReference.OnBeforeSerialize*:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: SceneReference.OnBeforeSerialize
        qualifiedName: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.OnBeforeSerialize
      VB:
      - id: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: SceneReference.OnBeforeSerialize
        qualifiedName: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.OnBeforeSerialize
    isDefinition: true
    commentId: Overload:Packages.SceneLoading.Runtime.SceneRefs.SceneReference.OnBeforeSerialize
  Packages.SceneLoading.Runtime.SceneRefs.SceneReference.OnAfterDeserialize*:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: SceneReference.OnAfterDeserialize
        qualifiedName: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.OnAfterDeserialize
      VB:
      - id: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: SceneReference.OnAfterDeserialize
        qualifiedName: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.OnAfterDeserialize
    isDefinition: true
    commentId: Overload:Packages.SceneLoading.Runtime.SceneRefs.SceneReference.OnAfterDeserialize
  Packages.SceneLoading.Runtime.SceneRefs:
    name:
      CSharp:
      - name: Packages.SceneLoading.Runtime.SceneRefs
        nameWithType: Packages.SceneLoading.Runtime.SceneRefs
        qualifiedName: Packages.SceneLoading.Runtime.SceneRefs
      VB:
      - name: Packages.SceneLoading.Runtime.SceneRefs
        nameWithType: Packages.SceneLoading.Runtime.SceneRefs
        qualifiedName: Packages.SceneLoading.Runtime.SceneRefs
    isDefinition: true
    commentId: N:Packages.SceneLoading.Runtime.SceneRefs
  Packages.SceneLoading.Runtime.SceneRefs.SceneReference:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.SceneRefs.SceneReference
        name: SceneReference
        nameWithType: SceneReference
        qualifiedName: Packages.SceneLoading.Runtime.SceneRefs.SceneReference
      VB:
      - id: Packages.SceneLoading.Runtime.SceneRefs.SceneReference
        name: SceneReference
        nameWithType: SceneReference
        qualifiedName: Packages.SceneLoading.Runtime.SceneRefs.SceneReference
    isDefinition: true
    parent: Packages.SceneLoading.Runtime.SceneRefs
    commentId: T:Packages.SceneLoading.Runtime.SceneRefs.SceneReference
  Packages.SceneLoading.Runtime.SceneRefs.SceneReference.op_Implicit*:
    name:
      CSharp:
      - id: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.op_Implicit*
        name: Implicit
        nameWithType: SceneReference.Implicit
        qualifiedName: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.Implicit
      VB:
      - id: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.op_Implicit*
        name: Widening
        nameWithType: SceneReference.Widening
        qualifiedName: Packages.SceneLoading.Runtime.SceneRefs.SceneReference.Widening
    isDefinition: true
    commentId: Overload:Packages.SceneLoading.Runtime.SceneRefs.SceneReference.op_Implicit
  System.SerializableAttribute:
    name:
      CSharp:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        nameWithType: SerializableAttribute
        qualifiedName: System.SerializableAttribute
        isExternal: true
      VB:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        nameWithType: SerializableAttribute
        qualifiedName: System.SerializableAttribute
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.SerializableAttribute
  System.SerializableAttribute.#ctor:
    name:
      CSharp:
      - id: System.SerializableAttribute.#ctor
        name: SerializableAttribute
        nameWithType: SerializableAttribute.SerializableAttribute
        qualifiedName: System.SerializableAttribute.SerializableAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.SerializableAttribute.#ctor
        name: SerializableAttribute
        nameWithType: SerializableAttribute.SerializableAttribute
        qualifiedName: System.SerializableAttribute.SerializableAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.SerializableAttribute
    commentId: M:System.SerializableAttribute.#ctor
